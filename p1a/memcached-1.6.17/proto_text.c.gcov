        -:    0:Source:proto_text.c
        -:    0:Graph:proto_text.gcno
        -:    0:Data:proto_text.gcda
        -:    0:Runs:382
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:/*
        -:    3: * Functions for handling the text related protocols, original and meta.
        -:    4: */
        -:    5:
        -:    6:#include "memcached.h"
        -:    7:#include "proto_text.h"
        -:    8:// FIXME: only for process_proxy_stats()
        -:    9:// - some better/different structure for stats subcommands
        -:   10:// would remove this abstraction leak.
        -:   11:#include "proto_proxy.h"
        -:   12:#include "authfile.h"
        -:   13:#include "storage.h"
        -:   14:#include "base64.h"
        -:   15:#ifdef TLS
        -:   16:#include "tls.h"
        -:   17:#endif
        -:   18:#include <string.h>
        -:   19:#include <stdlib.h>
        -:   20:
        -:   21:#define META_SPACE(p) { \
        -:   22:    *p = ' '; \
        -:   23:    p++; \
        -:   24:}
        -:   25:
        -:   26:#define META_CHAR(p, c) { \
        -:   27:    *p = ' '; \
        -:   28:    *(p+1) = c; \
        -:   29:    p += 2; \
        -:   30:}
        -:   31:
        -:   32:// NOTE: being a little casual with the write buffer.
        -:   33:// the buffer needs to be sized that the longest possible meta response will
        -:   34:// fit. Here we allow the key to fill up to half the write buffer, in case
        -:   35:// something terrible has gone wrong.
        -:   36:#define META_KEY(p, key, nkey, bin) { \
        -:   37:    META_CHAR(p, 'k'); \
        -:   38:    if (!bin) { \
        -:   39:        memcpy(p, key, nkey); \
        -:   40:        p += nkey; \
        -:   41:    } else { \
        -:   42:        p += base64_encode((unsigned char *) key, nkey, (unsigned char *)p, WRITE_BUFFER_SIZE / 2); \
        -:   43:        *p = ' '; \
        -:   44:        *(p+1) = 'b'; \
        -:   45:        p += 2; \
        -:   46:    } \
        -:   47:}
        -:   48:
        -:   49:typedef struct token_s {
        -:   50:    char *value;
        -:   51:    size_t length;
        -:   52:} token_t;
        -:   53:
       28:   54:static void _finalize_mset(conn *c, enum store_item_type ret) {
       28:   55:    mc_resp *resp = c->resp;
       28:   56:    item *it = c->item;
       28:   57:    conn_set_state(c, conn_new_cmd);
        -:   58:
        -:   59:    // information about the response line has been stashed in wbuf.
       28:   60:    char *p = resp->wbuf + resp->wbytes;
       28:   61:    char *end = p; // end of the stashed data portion.
        -:   62:
       28:   63:    switch (ret) {
       23:   64:    case STORED:
       23:   65:      if (settings.meta_response_old) {
    #####:   66:          memcpy(p, "OK", 2);
        -:   67:      } else {
       23:   68:          memcpy(p, "HD", 2);
        -:   69:      }
        -:   70:      // Only place noreply is used for meta cmds is a nominal response.
       23:   71:      if (c->noreply) {
        2:   72:          resp->skip = true;
        -:   73:      }
        -:   74:      break;
        -:   75:    case EXISTS:
        3:   76:      memcpy(p, "EX", 2);
        -:   77:      break;
        -:   78:    case NOT_FOUND:
    #####:   79:      memcpy(p, "NF", 2);
        -:   80:      break;
        -:   81:    case NOT_STORED:
        2:   82:      memcpy(p, "NS", 2);
        -:   83:      break;
    #####:   84:    default:
    #####:   85:      c->noreply = false;
    #####:   86:      out_string(c, "SERVER_ERROR Unhandled storage type.");
    #####:   87:      return;
        -:   88:    }
       28:   89:    p += 2;
        -:   90:
       32:   91:    for (char *fp = resp->wbuf; fp < end; fp++) {
        4:   92:        switch (*fp) {
    #####:   93:            case 'O':
        -:   94:                // Copy stashed opaque.
    #####:   95:                META_SPACE(p);
    #####:   96:                while (fp < end && *fp != ' ') {
    #####:   97:                    *p = *fp;
    #####:   98:                    p++;
    #####:   99:                    fp++;
        -:  100:                }
        -:  101:                break;
    #####:  102:            case 'k':
        -:  103:                // Encode the key here instead of earlier to minimize copying.
    #####:  104:                META_KEY(p, ITEM_key(it), it->nkey, (it->it_flags & ITEM_KEY_BINARY));
        -:  105:                break;
        2:  106:            case 'c':
        -:  107:                // We don't have the CAS until this point, which is why we
        -:  108:                // generate this line so late.
        2:  109:                META_CHAR(p, 'c');
        2:  110:                p = itoa_u64(c->cas, p);
        2:  111:                break;
        -:  112:            default:
        -:  113:                break;
        -:  114:        }
        -:  115:    }
        -:  116:
       28:  117:    memcpy(p, "\r\n", 2);
       28:  118:    p += 2;
        -:  119:    // we're offset into wbuf, but good convention to track wbytes.
       28:  120:    resp->wbytes = p - resp->wbuf;
       28:  121:    resp_add_iov(resp, end, p - end);
        -:  122:}
        -:  123:
        -:  124:/*
        -:  125: * we get here after reading the value in set/add/replace commands. The command
        -:  126: * has been stored in c->cmd, and the item is ready in c->item.
        -:  127: */
   301552:  128:void complete_nread_ascii(conn *c) {
  301552*:  129:    assert(c != NULL);
        -:  130:
   301552:  131:    item *it = c->item;
   301552:  132:    int comm = c->cmd;
   301552:  133:    enum store_item_type ret;
   301552:  134:    bool is_valid = false;
        -:  135:
   301552:  136:    pthread_mutex_lock(&c->thread->stats.mutex);
   301552:  137:    c->thread->stats.slab_stats[ITEM_clsid(it)].set_cmds++;
   301552:  138:    pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  139:
   301552:  140:    if ((it->it_flags & ITEM_CHUNKED) == 0) {
   294310:  141:        if (strncmp(ITEM_data(it) + it->nbytes - 2, "\r\n", 2) == 0) {
        -:  142:            is_valid = true;
        -:  143:        }
        -:  144:    } else {
     7242:  145:        char buf[2];
        -:  146:        /* should point to the final item chunk */
     7242:  147:        item_chunk *ch = (item_chunk *) c->ritem;
    7242*:  148:        assert(ch->used != 0);
        -:  149:        /* :( We need to look at the last two bytes. This could span two
        -:  150:         * chunks.
        -:  151:         */
     7242:  152:        if (ch->used > 1) {
     7242:  153:            buf[0] = ch->data[ch->used - 2];
     7242:  154:            buf[1] = ch->data[ch->used - 1];
        -:  155:        } else {
    #####:  156:            assert(ch->prev);
    #####:  157:            assert(ch->used == 1);
    #####:  158:            buf[0] = ch->prev->data[ch->prev->used - 1];
    #####:  159:            buf[1] = ch->data[ch->used - 1];
        -:  160:        }
     7242:  161:        if (strncmp(buf, "\r\n", 2) == 0) {
     7242:  162:            is_valid = true;
        -:  163:        } else {
    #####:  164:            assert(1 == 0);
        -:  165:        }
        -:  166:    }
        -:  167:
    7242*:  168:    if (!is_valid) {
        -:  169:        // metaset mode always returns errors.
    #####:  170:        if (c->mset_res) {
    #####:  171:            c->noreply = false;
        -:  172:        }
    #####:  173:        out_string(c, "CLIENT_ERROR bad data chunk");
        -:  174:    } else {
   301552:  175:      ret = store_item(it, comm, c);
        -:  176:
        -:  177:#ifdef ENABLE_DTRACE
        -:  178:      uint64_t cas = ITEM_get_cas(it);
        -:  179:      switch (c->cmd) {
        -:  180:      case NREAD_ADD:
        -:  181:          MEMCACHED_COMMAND_ADD(c->sfd, ITEM_key(it), it->nkey,
        -:  182:                                (ret == 1) ? it->nbytes : -1, cas);
        -:  183:          break;
        -:  184:      case NREAD_REPLACE:
        -:  185:          MEMCACHED_COMMAND_REPLACE(c->sfd, ITEM_key(it), it->nkey,
        -:  186:                                    (ret == 1) ? it->nbytes : -1, cas);
        -:  187:          break;
        -:  188:      case NREAD_APPEND:
        -:  189:          MEMCACHED_COMMAND_APPEND(c->sfd, ITEM_key(it), it->nkey,
        -:  190:                                   (ret == 1) ? it->nbytes : -1, cas);
        -:  191:          break;
        -:  192:      case NREAD_PREPEND:
        -:  193:          MEMCACHED_COMMAND_PREPEND(c->sfd, ITEM_key(it), it->nkey,
        -:  194:                                    (ret == 1) ? it->nbytes : -1, cas);
        -:  195:          break;
        -:  196:      case NREAD_SET:
        -:  197:          MEMCACHED_COMMAND_SET(c->sfd, ITEM_key(it), it->nkey,
        -:  198:                                (ret == 1) ? it->nbytes : -1, cas);
        -:  199:          break;
        -:  200:      case NREAD_CAS:
        -:  201:          MEMCACHED_COMMAND_CAS(c->sfd, ITEM_key(it), it->nkey, it->nbytes,
        -:  202:                                cas);
        -:  203:          break;
        -:  204:      }
        -:  205:#endif
        -:  206:
   301552:  207:      if (c->mset_res) {
       28:  208:          _finalize_mset(c, ret);
        -:  209:      } else {
   301524:  210:          switch (ret) {
   300886:  211:          case STORED:
   300886:  212:              out_string(c, "STORED");
   300886:  213:              break;
        5:  214:          case EXISTS:
        5:  215:              out_string(c, "EXISTS");
        5:  216:              break;
        2:  217:          case NOT_FOUND:
        2:  218:              out_string(c, "NOT_FOUND");
        2:  219:              break;
      631:  220:          case NOT_STORED:
      631:  221:              out_string(c, "NOT_STORED");
      631:  222:              break;
    #####:  223:          default:
    #####:  224:              out_string(c, "SERVER_ERROR Unhandled storage type.");
        -:  225:          }
        -:  226:      }
        -:  227:
        -:  228:    }
        -:  229:
   301552:  230:    c->set_stale = false; /* force flag to be off just in case */
   301552:  231:    c->mset_res = false;
   301552:  232:    item_remove(c->item);       /* release the c->item reference */
   301552:  233:    c->item = 0;
   301552:  234:}
        -:  235:
        -:  236:#define COMMAND_TOKEN 0
        -:  237:#define SUBCOMMAND_TOKEN 1
        -:  238:#define KEY_TOKEN 1
        -:  239:
        -:  240:#define MAX_TOKENS 24
        -:  241:
        -:  242:#define WANT_TOKENS(ntokens, min, max) \
        -:  243:    do { \
        -:  244:        if ((min != -1 && ntokens < min) || (max != -1 && ntokens > max)) { \
        -:  245:            out_string(c, "ERROR"); \
        -:  246:            return; \
        -:  247:        } \
        -:  248:    } while (0)
        -:  249:
        -:  250:#define WANT_TOKENS_OR(ntokens, a, b) \
        -:  251:    do { \
        -:  252:        if (ntokens != a && ntokens != b) { \
        -:  253:            out_string(c, "ERROR"); \
        -:  254:            return; \
        -:  255:        } \
        -:  256:    } while (0)
        -:  257:
        -:  258:#define WANT_TOKENS_MIN(ntokens, min) \
        -:  259:    do { \
        -:  260:        if (ntokens < min) { \
        -:  261:            out_string(c, "ERROR"); \
        -:  262:            return; \
        -:  263:        } \
        -:  264:    } while (0)
        -:  265:
        -:  266:/*
        -:  267: * Tokenize the command string by replacing whitespace with '\0' and update
        -:  268: * the token array tokens with pointer to start of each token and length.
        -:  269: * Returns total number of tokens.  The last valid token is the terminal
        -:  270: * token (value points to the first unprocessed character of the string and
        -:  271: * length zero).
        -:  272: *
        -:  273: * Usage example:
        -:  274: *
        -:  275: *  while(tokenize_command(command, ncommand, tokens, max_tokens) > 0) {
        -:  276: *      for(int ix = 0; tokens[ix].length != 0; ix++) {
        -:  277: *          ...
        -:  278: *      }
        -:  279: *      ncommand = tokens[ix].value - command;
        -:  280: *      command  = tokens[ix].value;
        -:  281: *   }
        -:  282: */
   560315:  283:static size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {
   560315:  284:    char *s, *e;
   560315:  285:    size_t ntokens = 0;
  560315*:  286:    assert(command != NULL && tokens != NULL && max_tokens > 1);
   560315:  287:    size_t len = strlen(command);
   560315:  288:    unsigned int i = 0;
        -:  289:
   560315:  290:    s = e = command;
 28350855:  291:    for (i = 0; i < len; i++) {
 27791385:  292:        if (*e == ' ') {
  1647740:  293:            if (s != e) {
  1647726:  294:                tokens[ntokens].value = s;
  1647726:  295:                tokens[ntokens].length = e - s;
  1647726:  296:                ntokens++;
  1647726:  297:                *e = '\0';
  1647726:  298:                if (ntokens == max_tokens - 1) {
      845:  299:                    e++;
      845:  300:                    s = e; /* so we don't add an extra token */
      845:  301:                    break;
        -:  302:                }
        -:  303:            }
  1646895:  304:            s = e + 1;
        -:  305:        }
 27790540:  306:        e++;
        -:  307:    }
        -:  308:
   560315:  309:    if (s != e) {
   559465:  310:        tokens[ntokens].value = s;
   559465:  311:        tokens[ntokens].length = e - s;
   559465:  312:        ntokens++;
        -:  313:    }
        -:  314:
        -:  315:    /*
        -:  316:     * If we scanned the whole string, the terminal value pointer is null,
        -:  317:     * otherwise it is the first unprocessed character.
        -:  318:     */
   560315:  319:    tokens[ntokens].value =  *e == '\0' ? NULL : e;
   560315:  320:    tokens[ntokens].length = 0;
   560315:  321:    ntokens++;
        -:  322:
   560315:  323:    return ntokens;
        -:  324:}
        -:  325:
        5:  326:int try_read_command_asciiauth(conn *c) {
        5:  327:    token_t tokens[MAX_TOKENS];
        5:  328:    size_t ntokens;
        5:  329:    char *cont = NULL;
        -:  330:
        -:  331:    // TODO: move to another function.
        5:  332:    if (!c->sasl_started) {
        5:  333:        char *el;
        5:  334:        uint32_t size = 0;
        -:  335:
        -:  336:        // impossible for the auth command to be this short.
        5:  337:        if (c->rbytes < 2)
        1:  338:            return 0;
        -:  339:
        5:  340:        el = memchr(c->rcurr, '\n', c->rbytes);
        -:  341:
        -:  342:        // If no newline after 1k, getting junk data, close out.
        5:  343:        if (!el) {
    #####:  344:            if (c->rbytes > 2048) {
    #####:  345:                conn_set_state(c, conn_closing);
    #####:  346:                return 1;
        -:  347:            }
        -:  348:            return 0;
        -:  349:        }
        -:  350:
        -:  351:        // Looking for: "set foo 0 0 N\r\nuser pass\r\n"
        -:  352:        // key, flags, and ttl are ignored. N is used to see if we have the rest.
        -:  353:
        -:  354:        // so tokenize doesn't walk past into the value.
        -:  355:        // it's fine to leave the \r in, as strtoul will stop at it.
        5:  356:        *el = '\0';
        -:  357:
        5:  358:        ntokens = tokenize_command(c->rcurr, tokens, MAX_TOKENS);
        -:  359:        // ensure the buffer is consumed.
        5:  360:        c->rbytes -= (el - c->rcurr) + 1;
        5:  361:        c->rcurr += (el - c->rcurr) + 1;
        -:  362:
        -:  363:        // final token is a NULL ender, so we have one more than expected.
        5:  364:        if (ntokens < 6
        4:  365:                || strcmp(tokens[0].value, "set") != 0
        4:  366:                || !safe_strtoul(tokens[4].value, &size)) {
        1:  367:            if (!c->resp) {
        1:  368:                if (!resp_start(c)) {
    #####:  369:                    conn_set_state(c, conn_closing);
    #####:  370:                    return 1;
        -:  371:                }
        -:  372:            }
        1:  373:            out_string(c, "CLIENT_ERROR unauthenticated");
        1:  374:            return 1;
        -:  375:        }
        -:  376:
        -:  377:        // we don't actually care about the key at all; it can be anything.
        -:  378:        // we do care about the size of the remaining read.
        4:  379:        c->rlbytes = size + 2;
        -:  380:
        4:  381:        c->sasl_started = true; // reuse from binprot sasl, but not sasl :)
        -:  382:    }
        -:  383:
        4:  384:    if (c->rbytes < c->rlbytes) {
        -:  385:        // need more bytes.
        -:  386:        return 0;
        -:  387:    }
        -:  388:
        -:  389:    // Going to respond at this point, so attach a response object.
        4:  390:    if (!c->resp) {
        4:  391:        if (!resp_start(c)) {
    #####:  392:            conn_set_state(c, conn_closing);
    #####:  393:            return 1;
        -:  394:        }
        -:  395:    }
        -:  396:
        4:  397:    cont = c->rcurr;
        -:  398:    // advance buffer. no matter what we're stopping.
        4:  399:    c->rbytes -= c->rlbytes;
        4:  400:    c->rcurr += c->rlbytes;
        4:  401:    c->sasl_started = false;
        -:  402:
        -:  403:    // must end with \r\n
        -:  404:    // NB: I thought ASCII sets also worked with just \n, but according to
        -:  405:    // complete_nread_ascii only \r\n is valid.
        4:  406:    if (strncmp(cont + c->rlbytes - 2, "\r\n", 2) != 0) {
    #####:  407:        out_string(c, "CLIENT_ERROR bad command line termination");
    #####:  408:        return 1;
        -:  409:    }
        -:  410:
        -:  411:    // payload should be "user pass", so we can use the tokenizer.
        4:  412:    cont[c->rlbytes - 2] = '\0';
        4:  413:    ntokens = tokenize_command(cont, tokens, MAX_TOKENS);
        -:  414:
        4:  415:    if (ntokens < 3) {
        1:  416:        out_string(c, "CLIENT_ERROR bad authentication token format");
        1:  417:        return 1;
        -:  418:    }
        -:  419:
        3:  420:    if (authfile_check(tokens[0].value, tokens[1].value) == 1) {
        2:  421:        out_string(c, "STORED");
        2:  422:        c->authenticated = true;
        2:  423:        c->try_read_command = try_read_command_ascii;
        2:  424:        pthread_mutex_lock(&c->thread->stats.mutex);
        2:  425:        c->thread->stats.auth_cmds++;
        2:  426:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  427:    } else {
        1:  428:        out_string(c, "CLIENT_ERROR authentication failure");
        1:  429:        pthread_mutex_lock(&c->thread->stats.mutex);
        1:  430:        c->thread->stats.auth_cmds++;
        1:  431:        c->thread->stats.auth_errors++;
        1:  432:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  433:    }
        -:  434:
        -:  435:    return 1;
        -:  436:}
        -:  437:
   559896:  438:int try_read_command_ascii(conn *c) {
   559896:  439:    char *el, *cont;
        -:  440:
   559896:  441:    if (c->rbytes == 0)
        -:  442:        return 0;
        -:  443:
   559896:  444:    el = memchr(c->rcurr, '\n', c->rbytes);
   559896:  445:    if (!el) {
      433:  446:        if (c->rbytes > 2048) {
        -:  447:            /*
        -:  448:             * We didn't have a '\n' in the first few k. This _has_ to be a
        -:  449:             * large multiget, if not we should just nuke the connection.
        -:  450:             */
        -:  451:            char *ptr = c->rcurr;
     4201:  452:            while (*ptr == ' ') { /* ignore leading whitespaces */
     4196:  453:                ++ptr;
        -:  454:            }
        -:  455:
        5:  456:            if (ptr - c->rcurr > 100 ||
        3:  457:                (strncmp(ptr, "get ", 4) && strncmp(ptr, "gets ", 5))) {
        -:  458:
        2:  459:                conn_set_state(c, conn_closing);
        2:  460:                return 1;
        -:  461:            }
        -:  462:
        -:  463:            // ASCII multigets are unbound, so our fixed size rbuf may not
        -:  464:            // work for this particular workload... For backcompat we'll use a
        -:  465:            // malloc/realloc/free routine just for this.
        3:  466:            if (!c->rbuf_malloced) {
        3:  467:                if (!rbuf_switch_to_malloc(c)) {
    #####:  468:                    conn_set_state(c, conn_closing);
    #####:  469:                    return 1;
        -:  470:                }
        -:  471:            }
        -:  472:        }
        -:  473:
      431:  474:        return 0;
        -:  475:    }
   559463:  476:    cont = el + 1;
   559463:  477:    if ((el - c->rcurr) > 1 && *(el - 1) == '\r') {
   479442:  478:        el--;
        -:  479:    }
   559463:  480:    *el = '\0';
        -:  481:
  559463*:  482:    assert(cont <= (c->rcurr + c->rbytes));
        -:  483:
   559463:  484:    c->last_cmd_time = current_time;
   559463:  485:    process_command_ascii(c, c->rcurr);
        -:  486:
   559463:  487:    c->rbytes -= (cont - c->rcurr);
   559463:  488:    c->rcurr = cont;
        -:  489:
  559463*:  490:    assert(c->rcurr <= (c->rbuf + c->rsize));
        -:  491:
        -:  492:    return 1;
        -:  493:}
        -:  494:
        -:  495:
   313712:  496:static inline bool set_noreply_maybe(conn *c, token_t *tokens, size_t ntokens)
        -:  497:{
   313712:  498:    int noreply_index = ntokens - 2;
        -:  499:
        -:  500:    /*
        -:  501:      NOTE: this function is not the first place where we are going to
        -:  502:      send the reply.  We could send it instead from process_command()
        -:  503:      if the request line has wrong number of tokens.  However parsing
        -:  504:      malformed line for "noreply" option is not reliable anyway, so
        -:  505:      it can't be helped.
        -:  506:    */
   313712:  507:    if (tokens[noreply_index].value
   313712:  508:        && strcmp(tokens[noreply_index].value, "noreply") == 0) {
   162851:  509:        c->noreply = true;
        -:  510:    }
   313712:  511:    return c->noreply;
        -:  512:}
        -:  513:
        -:  514:/* client flags == 0 means use no storage for client flags */
    50552:  515:static inline int make_ascii_get_suffix(char *suffix, item *it, bool return_cas, int nbytes) {
    50552:  516:    char *p = suffix;
    50552:  517:    *p = ' ';
    50552:  518:    p++;
    50552:  519:    if (FLAGS_SIZE(it) == 0) {
    50548:  520:        *p = '0';
    50548:  521:        p++;
        -:  522:    } else {
        4:  523:        p = itoa_u32(*((uint32_t *) ITEM_suffix(it)), p);
        -:  524:    }
    50552:  525:    *p = ' ';
    50552:  526:    p = itoa_u32(nbytes-2, p+1);
        -:  527:
    50552:  528:    if (return_cas) {
       19:  529:        *p = ' ';
       19:  530:        p = itoa_u64(ITEM_get_cas(it), p+1);
        -:  531:    }
        -:  532:
    50552:  533:    *p = '\r';
    50552:  534:    *(p+1) = '\n';
    50552:  535:    *(p+2) = '\0';
    50552:  536:    return (p - suffix) + 2;
        -:  537:}
        -:  538:
        -:  539:/* ntokens is overwritten here... shrug.. */
   112690:  540:static inline void process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas, bool should_touch) {
   112690:  541:    char *key;
   112690:  542:    size_t nkey;
   112690:  543:    item *it;
   112690:  544:    token_t *key_token = &tokens[KEY_TOKEN];
   112690:  545:    int32_t exptime_int = 0;
   112690:  546:    rel_time_t exptime = 0;
   112690:  547:    bool fail_length = false;
  112690*:  548:    assert(c != NULL);
   112690:  549:    mc_resp *resp = c->resp;
        -:  550:
   112690:  551:    if (should_touch) {
        -:  552:        // For get and touch commands, use first token as exptime
        6:  553:        if (!safe_strtol(tokens[1].value, &exptime_int)) {
    #####:  554:            out_string(c, "CLIENT_ERROR invalid exptime argument");
    #####:  555:            return;
        -:  556:        }
        6:  557:        key_token++;
       11:  558:        exptime = realtime(EXPTIME_TO_POSITIVE_TIME(exptime_int));
        -:  559:    }
        -:  560:
        -:  561:    do {
   245690:  562:        while(key_token->length != 0) {
   132160:  563:            bool overflow; // not used here.
   132160:  564:            key = key_token->value;
   132160:  565:            nkey = key_token->length;
        -:  566:
   132160:  567:            if (nkey > KEY_MAX_LENGTH) {
        2:  568:                fail_length = true;
        4:  569:                goto stop;
        -:  570:            }
        -:  571:
   132158:  572:            it = limited_get(key, nkey, c, exptime, should_touch, DO_UPDATE, &overflow);
   132158:  573:            if (settings.detail_enabled) {
        3:  574:                stats_prefix_record_get(key, nkey, NULL != it);
        -:  575:            }
   132158:  576:            if (it) {
        -:  577:                /*
        -:  578:                 * Construct the response. Each hit adds three elements to the
        -:  579:                 * outgoing data list:
        -:  580:                 *   "VALUE "
        -:  581:                 *   key
        -:  582:                 *   " " + flags + " " + data length + "\r\n" + data (with \r\n)
        -:  583:                 */
        -:  584:
        -:  585:                {
        -:  586:                  MEMCACHED_COMMAND_GET(c->sfd, ITEM_key(it), it->nkey,
    50552:  587:                                        it->nbytes, ITEM_get_cas(it));
    50552:  588:                  int nbytes = it->nbytes;;
    50552:  589:                  nbytes = it->nbytes;
    50552:  590:                  char *p = resp->wbuf;
    50552:  591:                  memcpy(p, "VALUE ", 6);
    50552:  592:                  p += 6;
    50552:  593:                  memcpy(p, ITEM_key(it), it->nkey);
    50552:  594:                  p += it->nkey;
    50552:  595:                  p += make_ascii_get_suffix(p, it, return_cas, nbytes);
    50552:  596:                  resp_add_iov(resp, resp->wbuf, p - resp->wbuf);
        -:  597:
        -:  598:#ifdef EXTSTORE
    50552:  599:                  if (it->it_flags & ITEM_HDR) {
      353:  600:                      if (storage_get_item(c, it, resp) != 0) {
        1:  601:                          pthread_mutex_lock(&c->thread->stats.mutex);
        1:  602:                          c->thread->stats.get_oom_extstore++;
        1:  603:                          pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  604:
        1:  605:                          item_remove(it);
        1:  606:                          goto stop;
        -:  607:                      }
    50199:  608:                  } else if ((it->it_flags & ITEM_CHUNKED) == 0) {
    31779:  609:                      resp_add_iov(resp, ITEM_data(it), it->nbytes);
        -:  610:                  } else {
    18420:  611:                      resp_add_chunked_iov(resp, it, it->nbytes);
        -:  612:                  }
        -:  613:#else
        -:  614:                  if ((it->it_flags & ITEM_CHUNKED) == 0) {
        -:  615:                      resp_add_iov(resp, ITEM_data(it), it->nbytes);
        -:  616:                  } else {
        -:  617:                      resp_add_chunked_iov(resp, it, it->nbytes);
        -:  618:                  }
        -:  619:#endif
        -:  620:                }
        -:  621:
    50551:  622:                if (settings.verbose > 1) {
    #####:  623:                    int ii;
    #####:  624:                    fprintf(stderr, ">%d sending key ", c->sfd);
    #####:  625:                    for (ii = 0; ii < it->nkey; ++ii) {
    #####:  626:                        fprintf(stderr, "%c", key[ii]);
        -:  627:                    }
    #####:  628:                    fprintf(stderr, "\n");
        -:  629:                }
        -:  630:
        -:  631:                /* item_get() has incremented it->refcount for us */
    50551:  632:                pthread_mutex_lock(&c->thread->stats.mutex);
    50551:  633:                if (should_touch) {
        7:  634:                    c->thread->stats.touch_cmds++;
        7:  635:                    c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;
        -:  636:                } else {
    50544:  637:                    c->thread->stats.lru_hits[it->slabs_clsid]++;
    50544:  638:                    c->thread->stats.get_cmds++;
        -:  639:                }
    50551:  640:                pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  641:#ifdef EXTSTORE
        -:  642:                /* If ITEM_HDR, an io_wrap owns the reference. */
    50551:  643:                if ((it->it_flags & ITEM_HDR) == 0) {
    50199:  644:                    resp->item = it;
        -:  645:                }
        -:  646:#else
        -:  647:                resp->item = it;
        -:  648:#endif
        -:  649:            } else {
    81606:  650:                pthread_mutex_lock(&c->thread->stats.mutex);
    81606:  651:                if (should_touch) {
        1:  652:                    c->thread->stats.touch_cmds++;
        1:  653:                    c->thread->stats.touch_misses++;
        -:  654:                } else {
    81605:  655:                    c->thread->stats.get_misses++;
    81605:  656:                    c->thread->stats.get_cmds++;
        -:  657:                }
    81606:  658:                MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);
    81606:  659:                pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  660:            }
        -:  661:
   132157:  662:            key_token++;
   132157:  663:            if (key_token->length != 0) {
    18627:  664:                if (!resp_start(c)) {
        1:  665:                    goto stop;
        -:  666:                }
    18626:  667:                resp = c->resp;
        -:  668:            }
        -:  669:        }
        -:  670:
        -:  671:        /*
        -:  672:         * If the command string hasn't been fully processed, get the next set
        -:  673:         * of tokens.
        -:  674:         */
   113530:  675:        if (key_token->value != NULL) {
      844:  676:            ntokens = tokenize_command(key_token->value, tokens, MAX_TOKENS);
      844:  677:            key_token = tokens;
      844:  678:            if (!resp_start(c)) {
    #####:  679:                goto stop;
        -:  680:            }
      844:  681:            resp = c->resp;
        -:  682:        }
   113530:  683:    } while(key_token->value != NULL);
   112686:  684:stop:
        -:  685:
   112690:  686:    if (settings.verbose > 1)
    #####:  687:        fprintf(stderr, ">%d END\n", c->sfd);
        -:  688:
        -:  689:    /*
        -:  690:        If the loop was terminated because of out-of-memory, it is not
        -:  691:        reliable to add END\r\n to the buffer, because it might not end
        -:  692:        in \r\n. So we send SERVER_ERROR instead.
        -:  693:    */
   112690:  694:    if (key_token->value != NULL) {
        -:  695:        // Kill any stacked responses we had.
        4:  696:        conn_release_items(c);
        -:  697:        // Start a new response object for the error message.
        4:  698:        if (!resp_start(c)) {
        -:  699:            // severe out of memory error.
    #####:  700:            conn_set_state(c, conn_closing);
    #####:  701:            return;
        -:  702:        }
        4:  703:        if (fail_length) {
        2:  704:            out_string(c, "CLIENT_ERROR bad command line format");
        -:  705:        } else {
        2:  706:            out_of_memory(c, "SERVER_ERROR out of memory writing get response");
        -:  707:        }
        -:  708:    } else {
        -:  709:        // Tag the end token onto the most recent response object.
   112686:  710:        resp_add_iov(resp, "END\r\n", 5);
   112686:  711:        conn_set_state(c, conn_mwrite);
        -:  712:    }
        -:  713:}
        -:  714:
       10:  715:inline static void process_stats_detail(conn *c, const char *command) {
      10*:  716:    assert(c != NULL);
        -:  717:
       10:  718:    if (strcmp(command, "on") == 0) {
        1:  719:        settings.detail_enabled = 1;
        1:  720:        out_string(c, "OK");
        -:  721:    }
        9:  722:    else if (strcmp(command, "off") == 0) {
        1:  723:        settings.detail_enabled = 0;
        1:  724:        out_string(c, "OK");
        -:  725:    }
        8:  726:    else if (strcmp(command, "dump") == 0) {
        8:  727:        int len;
        8:  728:        char *stats = stats_prefix_dump(&len);
        8:  729:        write_and_free(c, stats, len);
        -:  730:    }
        -:  731:    else {
    #####:  732:        out_string(c, "CLIENT_ERROR usage: stats detail on|off|dump");
        -:  733:    }
       10:  734:}
        -:  735:
     1603:  736:static void process_stat(conn *c, token_t *tokens, const size_t ntokens) {
     1603:  737:    const char *subcommand = tokens[SUBCOMMAND_TOKEN].value;
    1603*:  738:    assert(c != NULL);
        -:  739:
     1603:  740:    if (ntokens < 2) {
    #####:  741:        out_string(c, "CLIENT_ERROR bad command line");
    #####:  742:        return;
        -:  743:    }
        -:  744:
     1603:  745:    if (ntokens == 2) {
     1446:  746:        server_stats(&append_stats, c);
     1446:  747:        (void)get_stats(NULL, 0, &append_stats, c);
      157:  748:    } else if (strcmp(subcommand, "reset") == 0) {
        3:  749:        stats_reset();
        3:  750:        out_string(c, "RESET");
        3:  751:        return;
      154:  752:    } else if (strcmp(subcommand, "detail") == 0) {
        -:  753:        /* NOTE: how to tackle detail with binary? */
       10:  754:        if (ntokens < 4)
    #####:  755:            process_stats_detail(c, "");  /* outputs the error message */
        -:  756:        else
       10:  757:            process_stats_detail(c, tokens[2].value);
        -:  758:        /* Output already generated */
       10:  759:        return;
      144:  760:    } else if (strcmp(subcommand, "settings") == 0) {
       18:  761:        process_stat_settings(&append_stats, c);
      126:  762:    } else if (strcmp(subcommand, "cachedump") == 0) {
        3:  763:        char *buf;
        3:  764:        unsigned int bytes, id, limit = 0;
        -:  765:
        3:  766:        if (!settings.dump_enabled) {
    #####:  767:            out_string(c, "CLIENT_ERROR stats cachedump not allowed");
    #####:  768:            return;
        -:  769:        }
        -:  770:
        3:  771:        if (ntokens < 5) {
    #####:  772:            out_string(c, "CLIENT_ERROR bad command line");
    #####:  773:            return;
        -:  774:        }
        -:  775:
        6:  776:        if (!safe_strtoul(tokens[2].value, &id) ||
        3:  777:            !safe_strtoul(tokens[3].value, &limit)) {
    #####:  778:            out_string(c, "CLIENT_ERROR bad command line format");
    #####:  779:            return;
        -:  780:        }
        -:  781:
        3:  782:        if (id >= MAX_NUMBER_OF_SLAB_CLASSES) {
        1:  783:            out_string(c, "CLIENT_ERROR Illegal slab id");
        1:  784:            return;
        -:  785:        }
        -:  786:
        2:  787:        buf = item_cachedump(id, limit, &bytes);
        2:  788:        write_and_free(c, buf, bytes);
        2:  789:        return;
      123:  790:    } else if (strcmp(subcommand, "conns") == 0) {
        4:  791:        process_stats_conns(&append_stats, c);
        -:  792:#ifdef EXTSTORE
      119:  793:    } else if (strcmp(subcommand, "extstore") == 0) {
    #####:  794:        process_extstore_stats(&append_stats, c);
        -:  795:#endif
        -:  796:#ifdef PROXY
        -:  797:    } else if (strcmp(subcommand, "proxy") == 0) {
        -:  798:        process_proxy_stats(&append_stats, c);
        -:  799:#endif
        -:  800:    } else {
        -:  801:        /* getting here means that the subcommand is either engine specific or
        -:  802:           is invalid. query the engine and see. */
      119:  803:        if (get_stats(subcommand, strlen(subcommand), &append_stats, c)) {
      119:  804:            if (c->stats.buffer == NULL) {
    #####:  805:                out_of_memory(c, "SERVER_ERROR out of memory writing stats");
        -:  806:            } else {
      119:  807:                write_and_free(c, c->stats.buffer, c->stats.offset);
      119:  808:                c->stats.buffer = NULL;
        -:  809:            }
        -:  810:        } else {
    #####:  811:            out_string(c, "ERROR");
        -:  812:        }
      119:  813:        return;
        -:  814:    }
        -:  815:
        -:  816:    /* append terminator and start the transfer */
     1468:  817:    append_stats(NULL, 0, NULL, 0, c);
        -:  818:
     1468:  819:    if (c->stats.buffer == NULL) {
    #####:  820:        out_of_memory(c, "SERVER_ERROR out of memory writing stats");
        -:  821:    } else {
     1468:  822:        write_and_free(c, c->stats.buffer, c->stats.offset);
     1468:  823:        c->stats.buffer = NULL;
        -:  824:    }
        -:  825:}
        -:  826:
        -:  827:// slow snprintf for debugging purposes.
        2:  828:static void process_meta_command(conn *c, token_t *tokens, const size_t ntokens) {
       2*:  829:    assert(c != NULL);
        -:  830:
        2:  831:    if (ntokens < 3 || tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####:  832:        out_string(c, "CLIENT_ERROR bad command line format");
    #####:  833:        return;
        -:  834:    }
        -:  835:
        2:  836:    char *key = tokens[KEY_TOKEN].value;
        2:  837:    size_t nkey = tokens[KEY_TOKEN].length;
        -:  838:
       2*:  839:    if (ntokens >= 4 && tokens[2].length == 1 && tokens[2].value[0] == 'b') {
    #####:  840:        size_t ret = base64_decode((unsigned char *)key, nkey,
        -:  841:                    (unsigned char *)key, nkey);
    #####:  842:        if (ret == 0) {
        -:  843:            // failed to decode.
    #####:  844:            out_string(c, "CLIENT_ERROR bad command line format");
    #####:  845:            return;
        -:  846:        }
        -:  847:        nkey = ret;
        -:  848:    }
        -:  849:
        2:  850:    bool overflow; // not used here.
        2:  851:    item *it = limited_get(key, nkey, c, 0, false, DONT_UPDATE, &overflow);
        2:  852:    if (it) {
        1:  853:        mc_resp *resp = c->resp;
        1:  854:        size_t total = 0;
        1:  855:        size_t ret;
        -:  856:        // similar to out_string().
        1:  857:        memcpy(resp->wbuf, "ME ", 3);
        1:  858:        total += 3;
        1:  859:        if (it->it_flags & ITEM_KEY_BINARY) {
        -:  860:            // re-encode from memory rather than copy the original key;
        -:  861:            // to help give confidence that what in memory is what we asked
        -:  862:            // for.
    #####:  863:            total += base64_encode((unsigned char *) ITEM_key(it), it->nkey, (unsigned char *)resp->wbuf + total, WRITE_BUFFER_SIZE - total);
        -:  864:        } else {
        1:  865:            memcpy(resp->wbuf + total, ITEM_key(it), it->nkey);
        1:  866:            total += it->nkey;
        -:  867:        }
        1:  868:        resp->wbuf[total] = ' ';
        1:  869:        total++;
        -:  870:
       2*:  871:        ret = snprintf(resp->wbuf + total, WRITE_BUFFER_SIZE - (it->nkey + 12),
        -:  872:                "exp=%d la=%llu cas=%llu fetch=%s cls=%u size=%lu\r\n",
    #####:  873:                (it->exptime == 0) ? -1 : (current_time - it->exptime),
        1:  874:                (unsigned long long)(current_time - it->time),
        -:  875:                (unsigned long long)ITEM_get_cas(it),
        -:  876:                (it->it_flags & ITEM_FETCHED) ? "yes" : "no",
        1:  877:                ITEM_clsid(it),
        1:  878:                (unsigned long) ITEM_ntotal(it));
        -:  879:
        1:  880:        item_remove(it);
        1:  881:        resp->wbytes = total + ret;
        1:  882:        resp_add_iov(resp, resp->wbuf, resp->wbytes);
        1:  883:        conn_set_state(c, conn_new_cmd);
        -:  884:    } else {
        1:  885:        out_string(c, "EN");
        -:  886:    }
        2:  887:    pthread_mutex_lock(&c->thread->stats.mutex);
        2:  888:    c->thread->stats.meta_cmds++;
        2:  889:    pthread_mutex_unlock(&c->thread->stats.mutex);
        -:  890:}
        -:  891:
        -:  892:#define MFLAG_MAX_OPT_LENGTH 20
        -:  893:#define MFLAG_MAX_OPAQUE_LENGTH 32
        -:  894:
        -:  895:struct _meta_flags {
        -:  896:    unsigned int has_error :1; // flipped if we found an error during parsing.
        -:  897:    unsigned int no_update :1;
        -:  898:    unsigned int locked :1;
        -:  899:    unsigned int vivify :1;
        -:  900:    unsigned int la :1;
        -:  901:    unsigned int hit :1;
        -:  902:    unsigned int value :1;
        -:  903:    unsigned int set_stale :1;
        -:  904:    unsigned int no_reply :1;
        -:  905:    unsigned int has_cas :1;
        -:  906:    unsigned int new_ttl :1;
        -:  907:    unsigned int key_binary:1;
        -:  908:    char mode; // single character mode switch, common to ms/ma
        -:  909:    rel_time_t exptime;
        -:  910:    rel_time_t autoviv_exptime;
        -:  911:    rel_time_t recache_time;
        -:  912:    uint32_t client_flags;
        -:  913:    uint64_t req_cas_id;
        -:  914:    uint64_t delta; // ma
        -:  915:    uint64_t initial; // ma
        -:  916:};
        -:  917:
      104:  918:static int _meta_flag_preparse(token_t *tokens, const size_t start,
        -:  919:        struct _meta_flags *of, char **errstr) {
      104:  920:    unsigned int i;
      104:  921:    size_t ret;
      104:  922:    int32_t tmp_int;
      104:  923:    uint8_t seen[127] = {0};
        -:  924:    // Start just past the key token. Look at first character of each token.
      333:  925:    for (i = start; tokens[i].length != 0; i++) {
      230:  926:        uint8_t o = (uint8_t)tokens[i].value[0];
        -:  927:        // zero out repeat flags so we don't over-parse for return data.
      230:  928:        if (o >= 127 || seen[o] != 0) {
    #####:  929:            *errstr = "CLIENT_ERROR duplicate flag";
    #####:  930:            return -1;
        -:  931:        }
      230:  932:        seen[o] = 1;
      230:  933:        switch (o) {
        -:  934:            // base64 decode the key in-place, as the binary should always be
        -:  935:            // shorter and the conversion code buffers bytes.
        2:  936:            case 'b':
        4:  937:                ret = base64_decode((unsigned char *)tokens[KEY_TOKEN].value, tokens[KEY_TOKEN].length,
        2:  938:                            (unsigned char *)tokens[KEY_TOKEN].value, tokens[KEY_TOKEN].length);
        2:  939:                if (ret == 0) {
        -:  940:                    // Failed to decode
    #####:  941:                    *errstr = "CLIENT_ERROR error decoding key";
    #####:  942:                    of->has_error = 1;
        -:  943:                }
        2:  944:                tokens[KEY_TOKEN].length = ret;
        2:  945:                of->key_binary = 1;
        2:  946:                break;
        -:  947:            /* Negative exptimes can underflow and end up immortal. realtime() will
        -:  948:               immediately expire values that are greater than REALTIME_MAXDELTA, but less
        -:  949:               than process_started, so lets aim for that. */
       16:  950:            case 'N':
       16:  951:                of->locked = 1;
       16:  952:                of->vivify = 1;
       16:  953:                if (!safe_strtol(tokens[i].value+1, &tmp_int)) {
    #####:  954:                    *errstr = "CLIENT_ERROR bad token in command line format";
    #####:  955:                    of->has_error = 1;
        -:  956:                } else {
       32:  957:                    of->autoviv_exptime = realtime(EXPTIME_TO_POSITIVE_TIME(tmp_int));
        -:  958:                }
        -:  959:                break;
       25:  960:            case 'T':
       25:  961:                of->locked = 1;
       25:  962:                if (!safe_strtol(tokens[i].value+1, &tmp_int)) {
    #####:  963:                    *errstr = "CLIENT_ERROR bad token in command line format";
    #####:  964:                    of->has_error = 1;
        -:  965:                } else {
       50:  966:                    of->exptime = realtime(EXPTIME_TO_POSITIVE_TIME(tmp_int));
       25:  967:                    of->new_ttl = true;
        -:  968:                }
        -:  969:                break;
        2:  970:            case 'R':
        2:  971:                of->locked = 1;
        2:  972:                if (!safe_strtol(tokens[i].value+1, &tmp_int)) {
    #####:  973:                    *errstr = "CLIENT_ERROR bad token in command line format";
    #####:  974:                    of->has_error = 1;
        -:  975:                } else {
        4:  976:                    of->recache_time = realtime(EXPTIME_TO_POSITIVE_TIME(tmp_int));
        -:  977:                }
        -:  978:                break;
        1:  979:            case 'l':
        1:  980:                of->la = 1;
        1:  981:                of->locked = 1; // need locked to delay LRU bump
        1:  982:                break;
        -:  983:            case 'O':
        -:  984:            case 'P':
        -:  985:            case 'L':
        -:  986:                break;
        -:  987:            case 'k': // known but no special handling
        -:  988:            case 's':
        -:  989:            case 't':
        -:  990:            case 'c':
        -:  991:            case 'f':
        -:  992:                break;
       52:  993:            case 'v':
       52:  994:                of->value = 1;
       52:  995:                break;
        5:  996:            case 'h':
        5:  997:                of->locked = 1; // need locked to delay LRU bump
        5:  998:                break;
        2:  999:            case 'u':
        2: 1000:                of->no_update = 1;
        2: 1001:                break;
       10: 1002:            case 'q':
       10: 1003:                of->no_reply = 1;
       10: 1004:                break;
        -: 1005:            // mset-related.
    #####: 1006:            case 'F':
    #####: 1007:                if (!safe_strtoul(tokens[i].value+1, &of->client_flags)) {
    #####: 1008:                    of->has_error = true;
        -: 1009:                }
        -: 1010:                break;
       12: 1011:            case 'C': // mset, mdelete, marithmetic
       12: 1012:                if (!safe_strtoull(tokens[i].value+1, &of->req_cas_id)) {
    #####: 1013:                    *errstr = "CLIENT_ERROR bad token in command line format";
    #####: 1014:                    of->has_error = true;
        -: 1015:                } else {
       12: 1016:                    of->has_cas = true;
        -: 1017:                }
        -: 1018:                break;
       10: 1019:            case 'M': // mset and marithmetic mode switch
       10: 1020:                if (tokens[i].length != 2) {
    #####: 1021:                    *errstr = "CLIENT_ERROR incorrect length for M token";
    #####: 1022:                    of->has_error = 1;
        -: 1023:                } else {
       10: 1024:                    of->mode = tokens[i].value[1];
        -: 1025:                }
        -: 1026:                break;
        5: 1027:            case 'J': // marithmetic initial value
        5: 1028:                if (!safe_strtoull(tokens[i].value+1, &of->initial)) {
    #####: 1029:                    *errstr = "CLIENT_ERROR invalid numeric initial value";
    #####: 1030:                    of->has_error = 1;
        -: 1031:                }
        -: 1032:                break;
        5: 1033:            case 'D': // marithmetic delta value
        5: 1034:                if (!safe_strtoull(tokens[i].value+1, &of->delta)) {
    #####: 1035:                    *errstr = "CLIENT_ERROR invalid numeric delta value";
    #####: 1036:                    of->has_error = 1;
        -: 1037:                }
        -: 1038:                break;
        2: 1039:            case 'I':
        2: 1040:                of->set_stale = 1;
        2: 1041:                break;
        1: 1042:            default: // unknown flag, bail.
        1: 1043:                *errstr = "CLIENT_ERROR invalid flag";
        1: 1044:                return -1;
        -: 1045:        }
        -: 1046:    }
        -: 1047:
      103: 1048:    return of->has_error ? -1 : 0;
        -: 1049:}
        -: 1050:
       56: 1051:static void process_mget_command(conn *c, token_t *tokens, const size_t ntokens) {
       56: 1052:    char *key;
       56: 1053:    size_t nkey;
       56: 1054:    item *it;
       56: 1055:    unsigned int i = 0;
       56: 1056:    struct _meta_flags of = {0}; // option bitflags.
       56: 1057:    uint32_t hv; // cached hash value for unlocking an item.
       56: 1058:    bool failed = false;
       56: 1059:    bool item_created = false;
       56: 1060:    bool won_token = false;
       56: 1061:    bool ttl_set = false;
       56: 1062:    char *errstr = "CLIENT_ERROR bad command line format";
      56*: 1063:    assert(c != NULL);
       56: 1064:    mc_resp *resp = c->resp;
       56: 1065:    char *p = resp->wbuf;
        -: 1066:
     112*: 1067:    WANT_TOKENS_MIN(ntokens, 3);
        -: 1068:
        -: 1069:    // FIXME: do we move this check to after preparse?
       56: 1070:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1071:        out_errstring(c, "CLIENT_ERROR bad command line format");
    #####: 1072:        return;
        -: 1073:    }
        -: 1074:
        -: 1075:    // NOTE: final token has length == 0.
        -: 1076:    // KEY_TOKEN == 1. 0 is command.
        -: 1077:
       56: 1078:    if (ntokens == 3) {
        -: 1079:        // TODO: any way to fix this?
    #####: 1080:        out_errstring(c, "CLIENT_ERROR bad command line format");
    #####: 1081:        return;
       56: 1082:    } else if (ntokens > MFLAG_MAX_OPT_LENGTH) {
        -: 1083:        // TODO: ensure the command tokenizer gives us at least this many
    #####: 1084:        out_errstring(c, "CLIENT_ERROR options flags are too long");
    #####: 1085:        return;
        -: 1086:    }
        -: 1087:
        -: 1088:    // scrubs duplicated options and sets flags for how to load the item.
        -: 1089:    // we pass in the first token that should be a flag.
       56: 1090:    if (_meta_flag_preparse(tokens, 2, &of, &errstr) != 0) {
        1: 1091:        out_errstring(c, errstr);
        1: 1092:        return;
        -: 1093:    }
       55: 1094:    c->noreply = of.no_reply;
        -: 1095:
        -: 1096:    // Grab key and length after meta preparsing in case it was decoded.
       55: 1097:    key = tokens[KEY_TOKEN].value;
       55: 1098:    nkey = tokens[KEY_TOKEN].length;
        -: 1099:
        -: 1100:    // TODO: need to indicate if the item was overflowed or not?
        -: 1101:    // I think we do, since an overflow shouldn't trigger an alloc/replace.
       55: 1102:    bool overflow = false;
       55: 1103:    if (!of.locked) {
       41: 1104:        it = limited_get(key, nkey, c, 0, false, !of.no_update, &overflow);
        -: 1105:    } else {
        -: 1106:        // If we had to lock the item, we're doing our own bump later.
       14: 1107:        it = limited_get_locked(key, nkey, c, DONT_UPDATE, &hv, &overflow);
        -: 1108:    }
        -: 1109:
        -: 1110:    // Since we're a new protocol, we can actually inform users that refcount
        -: 1111:    // overflow is happening by straight up throwing an error.
        -: 1112:    // We definitely don't want to re-autovivify by accident.
       55: 1113:    if (overflow) {
    #####: 1114:        assert(it == NULL);
    #####: 1115:        out_errstring(c, "SERVER_ERROR refcount overflow during fetch");
    #####: 1116:        return;
        -: 1117:    }
        -: 1118:
       55: 1119:    if (it == NULL && of.vivify) {
        -: 1120:        // Fill in the exptime during parsing later.
        2: 1121:        it = item_alloc(key, nkey, 0, realtime(0), 2);
        -: 1122:        // We don't actually need any of do_store_item's logic:
        -: 1123:        // - already fetched and missed an existing item.
        -: 1124:        // - lock is still held.
        -: 1125:        // - not append/prepend/replace
        -: 1126:        // - not testing CAS
        2: 1127:        if (it != NULL) {
        -: 1128:            // I look forward to the day I get rid of this :)
        2: 1129:            memcpy(ITEM_data(it), "\r\n", 2);
        -: 1130:            // NOTE: This initializes the CAS value.
        2: 1131:            do_item_link(it, hv);
        2: 1132:            item_created = true;
        -: 1133:        }
        -: 1134:    }
        -: 1135:
        -: 1136:    // don't have to check result of add_iov() since the iov size defaults are
        -: 1137:    // enough.
       55: 1138:    if (it) {
       37: 1139:        if (of.value) {
       25: 1140:            memcpy(p, "VA ", 3);
       25: 1141:            p = itoa_u32(it->nbytes-2, p+3);
        -: 1142:        } else {
       12: 1143:            if (settings.meta_response_old) {
    #####: 1144:                memcpy(p, "OK", 2);
        -: 1145:            } else {
       12: 1146:                memcpy(p, "HD", 2);
        -: 1147:            }
       12: 1148:            p += 2;
        -: 1149:        }
        -: 1150:
      152: 1151:        for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
      115: 1152:            switch (tokens[i].value[0]) {
        1: 1153:                case 'T':
        1: 1154:                    ttl_set = true;
        1: 1155:                    it->exptime = of.exptime;
        1: 1156:                    break;
        7: 1157:                case 'N':
        7: 1158:                    if (item_created) {
        2: 1159:                        it->exptime = of.autoviv_exptime;
        2: 1160:                        won_token = true;
        -: 1161:                    }
        -: 1162:                    break;
        2: 1163:                case 'R':
        -: 1164:                    // If we haven't autovivified and supplied token is less
        -: 1165:                    // than current TTL, mark a win.
        2: 1166:                    if ((it->it_flags & ITEM_TOKEN_SENT) == 0
        1: 1167:                            && !item_created
        1: 1168:                            && it->exptime != 0
        1: 1169:                            && it->exptime < of.recache_time) {
        1: 1170:                        won_token = true;
        -: 1171:                    }
        -: 1172:                    break;
       31: 1173:                case 's':
       31: 1174:                    META_CHAR(p, 's');
       31: 1175:                    p = itoa_u32(it->nbytes-2, p);
       31: 1176:                    break;
       21: 1177:                case 't':
        -: 1178:                    // TTL remaining as of this request.
        -: 1179:                    // needs to be relative because server clocks may not be in sync.
       21: 1180:                    META_CHAR(p, 't');
       21: 1181:                    if (it->exptime == 0) {
    #####: 1182:                        *p = '-';
    #####: 1183:                        *(p+1) = '1';
    #####: 1184:                        p += 2;
        -: 1185:                    } else {
       21: 1186:                        p = itoa_u32(it->exptime - current_time, p);
        -: 1187:                    }
        -: 1188:                    break;
       11: 1189:                case 'c':
       11: 1190:                    META_CHAR(p, 'c');
       11: 1191:                    p = itoa_u64(ITEM_get_cas(it), p);
       11: 1192:                    break;
    #####: 1193:                case 'f':
    #####: 1194:                    META_CHAR(p, 'f');
    #####: 1195:                    if (FLAGS_SIZE(it) == 0) {
    #####: 1196:                        *p = '0';
    #####: 1197:                        p++;
        -: 1198:                    } else {
    #####: 1199:                        p = itoa_u32(*((uint32_t *) ITEM_suffix(it)), p);
        -: 1200:                    }
        -: 1201:                    break;
        1: 1202:                case 'l':
        1: 1203:                    META_CHAR(p, 'l');
        1: 1204:                    p = itoa_u32(current_time - it->time, p);
        1: 1205:                    break;
        5: 1206:                case 'h':
        5: 1207:                    META_CHAR(p, 'h');
        5: 1208:                    if (it->it_flags & ITEM_FETCHED) {
        2: 1209:                        *p = '1';
        -: 1210:                    } else {
        3: 1211:                        *p = '0';
        -: 1212:                    }
        5: 1213:                    p++;
        5: 1214:                    break;
        2: 1215:                case 'O':
        2: 1216:                    if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1217:                        errstr = "CLIENT_ERROR opaque token too long";
    #####: 1218:                        goto error;
        -: 1219:                    }
        2: 1220:                    META_SPACE(p);
        2: 1221:                    memcpy(p, tokens[i].value, tokens[i].length);
        2: 1222:                    p += tokens[i].length;
        2: 1223:                    break;
        3: 1224:                case 'k':
        3: 1225:                    META_KEY(p, ITEM_key(it), it->nkey, (it->it_flags & ITEM_KEY_BINARY));
        -: 1226:                    break;
        -: 1227:            }
        -: 1228:        }
        -: 1229:
        -: 1230:        // Has this item already sent a token?
        -: 1231:        // Important to do this here so we don't send W with Z.
        -: 1232:        // Isn't critical, but easier for client authors to understand.
       37: 1233:        if (it->it_flags & ITEM_TOKEN_SENT) {
        3: 1234:            META_CHAR(p, 'Z');
        -: 1235:        }
       37: 1236:        if (it->it_flags & ITEM_STALE) {
        2: 1237:            META_CHAR(p, 'X');
        -: 1238:            // FIXME: think hard about this. is this a default, or a flag?
        2: 1239:            if ((it->it_flags & ITEM_TOKEN_SENT) == 0) {
        -: 1240:                // If we're stale but no token already sent, now send one.
        -: 1241:                won_token = true;
        -: 1242:            }
        -: 1243:        }
        -: 1244:
       36: 1245:        if (won_token) {
        -: 1246:            // Mark a win into the flag buffer.
        4: 1247:            META_CHAR(p, 'W');
        4: 1248:            it->it_flags |= ITEM_TOKEN_SENT;
        -: 1249:        }
        -: 1250:
       37: 1251:        *p = '\r';
       37: 1252:        *(p+1) = '\n';
       37: 1253:        *(p+2) = '\0';
       37: 1254:        p += 2;
        -: 1255:        // finally, chain in the buffer.
       37: 1256:        resp_add_iov(resp, resp->wbuf, p - resp->wbuf);
        -: 1257:
       37: 1258:        if (of.value) {
        -: 1259:#ifdef EXTSTORE
       25: 1260:            if (it->it_flags & ITEM_HDR) {
        2: 1261:                if (storage_get_item(c, it, resp) != 0) {
    #####: 1262:                    pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 1263:                    c->thread->stats.get_oom_extstore++;
    #####: 1264:                    pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1265:
    #####: 1266:                    failed = true;
        -: 1267:                }
       23: 1268:            } else if ((it->it_flags & ITEM_CHUNKED) == 0) {
       23: 1269:                resp_add_iov(resp, ITEM_data(it), it->nbytes);
        -: 1270:            } else {
    #####: 1271:                resp_add_chunked_iov(resp, it, it->nbytes);
        -: 1272:            }
        -: 1273:#else
        -: 1274:            if ((it->it_flags & ITEM_CHUNKED) == 0) {
        -: 1275:                resp_add_iov(resp, ITEM_data(it), it->nbytes);
        -: 1276:            } else {
        -: 1277:                resp_add_chunked_iov(resp, it, it->nbytes);
        -: 1278:            }
        -: 1279:#endif
        -: 1280:        }
        -: 1281:
        -: 1282:        // need to hold the ref at least because of the key above.
        -: 1283:#ifdef EXTSTORE
      23*: 1284:        if (!failed) {
       37: 1285:            if ((it->it_flags & ITEM_HDR) != 0 && of.value) {
        -: 1286:                // Only have extstore clean if header and returning value.
        2: 1287:                resp->item = NULL;
        -: 1288:            } else {
       35: 1289:                resp->item = it;
        -: 1290:            }
        -: 1291:        } else {
        -: 1292:            // Failed to set up extstore fetch.
    #####: 1293:            if (of.locked) {
    #####: 1294:                do_item_remove(it);
        -: 1295:            } else {
    #####: 1296:                item_remove(it);
        -: 1297:            }
        -: 1298:        }
        -: 1299:#else
        -: 1300:        resp->item = it;
        -: 1301:#endif
        -: 1302:    } else {
        -: 1303:        failed = true;
        -: 1304:    }
        -: 1305:
       55: 1306:    if (of.locked) {
        -: 1307:        // Delayed bump so we could get fetched/last access time pre-update.
       14: 1308:        if (!of.no_update && it != NULL) {
       12: 1309:            do_item_bump(c, it, hv);
        -: 1310:        }
       14: 1311:        item_unlock(hv);
        -: 1312:    }
        -: 1313:
        -: 1314:    // we count this command as a normal one if we've gotten this far.
        -: 1315:    // TODO: for autovivify case, miss never happens. Is this okay?
       55: 1316:    if (!failed) {
       37: 1317:        pthread_mutex_lock(&c->thread->stats.mutex);
       37: 1318:        if (ttl_set) {
        1: 1319:            c->thread->stats.touch_cmds++;
        1: 1320:            c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;
        -: 1321:        } else {
       36: 1322:            c->thread->stats.lru_hits[it->slabs_clsid]++;
       36: 1323:            c->thread->stats.get_cmds++;
        -: 1324:        }
       37: 1325:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1326:
       37: 1327:        conn_set_state(c, conn_new_cmd);
        -: 1328:    } else {
       18: 1329:        pthread_mutex_lock(&c->thread->stats.mutex);
       18: 1330:        if (ttl_set) {
    #####: 1331:            c->thread->stats.touch_cmds++;
    #####: 1332:            c->thread->stats.touch_misses++;
        -: 1333:        } else {
       18: 1334:            c->thread->stats.get_misses++;
       18: 1335:            c->thread->stats.get_cmds++;
        -: 1336:        }
       18: 1337:        MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);
       18: 1338:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1339:
        -: 1340:        // This gets elided in noreply mode.
       18: 1341:        out_string(c, "EN");
        -: 1342:    }
        -: 1343:    return;
    #####: 1344:error:
    #####: 1345:    if (it) {
    #####: 1346:        do_item_remove(it);
    #####: 1347:        if (of.locked) {
    #####: 1348:            item_unlock(hv);
        -: 1349:        }
        -: 1350:    }
    #####: 1351:    out_errstring(c, errstr);
        -: 1352:}
        -: 1353:
       30: 1354:static void process_mset_command(conn *c, token_t *tokens, const size_t ntokens) {
       30: 1355:    char *key;
       30: 1356:    size_t nkey;
       30: 1357:    item *it;
       30: 1358:    int i;
       30: 1359:    short comm = NREAD_SET;
       30: 1360:    struct _meta_flags of = {0}; // option bitflags.
       30: 1361:    char *errstr = "CLIENT_ERROR bad command line format";
       30: 1362:    uint32_t hv; // cached hash value.
       30: 1363:    int vlen = 0; // value from data line.
      30*: 1364:    assert(c != NULL);
       30: 1365:    mc_resp *resp = c->resp;
       30: 1366:    char *p = resp->wbuf;
        -: 1367:
      59*: 1368:    WANT_TOKENS_MIN(ntokens, 3);
        -: 1369:
        -: 1370:    // TODO: most of this is identical to mget.
       30: 1371:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1372:        out_errstring(c, "CLIENT_ERROR bad command line format");
    #####: 1373:        return;
        -: 1374:    }
        -: 1375:
       30: 1376:    if (ntokens == 3) {
        1: 1377:        out_errstring(c, "CLIENT_ERROR bad command line format");
        1: 1378:        return;
        -: 1379:    }
        -: 1380:
       29: 1381:    if (ntokens > MFLAG_MAX_OPT_LENGTH) {
    #####: 1382:        out_errstring(c, "CLIENT_ERROR options flags too long");
    #####: 1383:        return;
        -: 1384:    }
        -: 1385:
        -: 1386:    // We note tokens into the front of the write buffer, so we can create the
        -: 1387:    // final buffer in complete_nread_ascii.
       29: 1388:    p = resp->wbuf;
        -: 1389:
       29: 1390:    if (!safe_strtol(tokens[KEY_TOKEN + 1].value, (int32_t*)&vlen)) {
    #####: 1391:        out_errstring(c, "CLIENT_ERROR bad command line format");
    #####: 1392:        return;
        -: 1393:    }
        -: 1394:
       29: 1395:    if (vlen < 0 || vlen > (INT_MAX - 2)) {
    #####: 1396:        out_errstring(c, "CLIENT_ERROR bad command line format");
    #####: 1397:        return;
        -: 1398:    }
       29: 1399:    vlen += 2;
        -: 1400:
        -: 1401:    // We need to at least try to get the size to properly slurp bad bytes
        -: 1402:    // after an error.
        -: 1403:    // we pass in the first token that should be a flag.
       29: 1404:    if (_meta_flag_preparse(tokens, 3, &of, &errstr) != 0) {
    #####: 1405:        goto error;
        -: 1406:    }
        -: 1407:
       29: 1408:    key = tokens[KEY_TOKEN].value;
       29: 1409:    nkey = tokens[KEY_TOKEN].length;
        -: 1410:
        -: 1411:    // Set noreply after tokens are understood.
       29: 1412:    c->noreply = of.no_reply;
        -: 1413:    // Clear cas return value
       29: 1414:    c->cas = 0;
        -: 1415:
       29: 1416:    bool has_error = false;
      102: 1417:    for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
       73: 1418:        switch (tokens[i].value[0]) {
        -: 1419:            // TODO: macro perhaps?
    #####: 1420:            case 'O':
    #####: 1421:                if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1422:                    errstr = "CLIENT_ERROR opaque token too long";
    #####: 1423:                    has_error = true;
    #####: 1424:                    break;
        -: 1425:                }
    #####: 1426:                META_SPACE(p);
    #####: 1427:                memcpy(p, tokens[i].value, tokens[i].length);
    #####: 1428:                p += tokens[i].length;
    #####: 1429:                break;
    #####: 1430:            case 'k':
    #####: 1431:                META_CHAR(p, 'k');
    #####: 1432:                break;
        2: 1433:            case 'c':
        -: 1434:                // need to set the cas value post-assignment.
        2: 1435:                META_CHAR(p, 'c');
        2: 1436:                break;
        -: 1437:        }
        -: 1438:    }
        -: 1439:
        -: 1440:    // "mode switch" to alternative commands
       29: 1441:    switch (of.mode) {
        -: 1442:        case 0:
        -: 1443:            break; // no mode supplied.
        2: 1444:        case 'E': // Add...
        2: 1445:            comm = NREAD_ADD;
        2: 1446:            break;
        1: 1447:        case 'A': // Append.
        1: 1448:            comm = NREAD_APPEND;
        1: 1449:            break;
        1: 1450:        case 'P': // Prepend.
        1: 1451:            comm = NREAD_PREPEND;
        1: 1452:            break;
        2: 1453:        case 'R': // Replace.
        2: 1454:            comm = NREAD_REPLACE;
        2: 1455:            break;
        -: 1456:        case 'S': // Set. Default.
        -: 1457:            comm = NREAD_SET;
        -: 1458:            break;
        1: 1459:        default:
        1: 1460:            errstr = "CLIENT_ERROR invalid mode for ms M token";
        1: 1461:            goto error;
        -: 1462:    }
        -: 1463:
        -: 1464:    // The item storage function doesn't exactly map to mset.
        -: 1465:    // If a CAS value is supplied, upgrade default SET mode to CAS mode.
        -: 1466:    // Also allows REPLACE to work, as REPLACE + CAS works the same as CAS.
        -: 1467:    // add-with-cas works the same as add; but could only LRU bump if match..
        -: 1468:    // APPEND/PREPEND allow a simplified CAS check.
       28: 1469:    if (of.has_cas && (comm == NREAD_SET || comm == NREAD_REPLACE)) {
        8: 1470:        comm = NREAD_CAS;
        -: 1471:    }
        -: 1472:
        -: 1473:    // We attempt to process as much as we can in hopes of getting a valid and
        -: 1474:    // adjusted vlen, or else the data swallowed after error will be for 0b.
       28: 1475:    if (has_error)
    #####: 1476:        goto error;
        -: 1477:
       28: 1478:    it = item_alloc(key, nkey, of.client_flags, of.exptime, vlen);
        -: 1479:
       28: 1480:    if (it == 0) {
    #####: 1481:        enum store_item_type status;
        -: 1482:        // TODO: These could be normalized codes (TL and OM). Need to
        -: 1483:        // reorganize the output stuff a bit though.
    #####: 1484:        if (! item_size_ok(nkey, of.client_flags, vlen)) {
    #####: 1485:            errstr = "SERVER_ERROR object too large for cache";
    #####: 1486:            status = TOO_LARGE;
    #####: 1487:            pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 1488:            c->thread->stats.store_too_large++;
    #####: 1489:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1490:        } else {
    #####: 1491:            errstr = "SERVER_ERROR out of memory storing object";
    #####: 1492:            status = NO_MEMORY;
    #####: 1493:            pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 1494:            c->thread->stats.store_no_memory++;
    #####: 1495:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1496:        }
        -: 1497:        // FIXME: LOGGER_LOG specific to mset, include options.
    #####: 1498:        LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE,
        -: 1499:                NULL, status, comm, key, nkey, 0, 0);
        -: 1500:
        -: 1501:        /* Avoid stale data persisting in cache because we failed alloc. */
        -: 1502:        // NOTE: only if SET mode?
    #####: 1503:        it = item_get_locked(key, nkey, c, DONT_UPDATE, &hv);
    #####: 1504:        if (it) {
    #####: 1505:            do_item_unlink(it, hv);
    #####: 1506:            STORAGE_delete(c->thread->storage, it);
    #####: 1507:            do_item_remove(it);
        -: 1508:        }
    #####: 1509:        item_unlock(hv);
        -: 1510:
    #####: 1511:        goto error;
        -: 1512:    }
       28: 1513:    ITEM_set_cas(it, of.req_cas_id);
        -: 1514:
       28: 1515:    c->item = it;
        -: 1516:#ifdef NEED_ALIGN
        -: 1517:    if (it->it_flags & ITEM_CHUNKED) {
        -: 1518:        c->ritem = ITEM_schunk(it);
        -: 1519:    } else {
        -: 1520:        c->ritem = ITEM_data(it);
        -: 1521:    }
        -: 1522:#else
       28: 1523:    c->ritem = ITEM_data(it);
        -: 1524:#endif
       28: 1525:    c->rlbytes = it->nbytes;
       28: 1526:    c->cmd = comm;
        -: 1527:
        -: 1528:    // Prevent printing back the key in meta commands as garbage.
       28: 1529:    if (of.key_binary) {
        1: 1530:        it->it_flags |= ITEM_KEY_BINARY;
        -: 1531:    }
        -: 1532:
       28: 1533:    if (of.set_stale && comm == NREAD_CAS) {
        1: 1534:        c->set_stale = true;
        -: 1535:    }
       28: 1536:    resp->wbytes = p - resp->wbuf;
        -: 1537:    // we don't set up the iov here, instead after complete_nread_ascii when
        -: 1538:    // we have the full status code and item data.
       28: 1539:    c->mset_res = true;
       28: 1540:    conn_set_state(c, conn_nread);
       28: 1541:    return;
        1: 1542:error:
        -: 1543:    /* swallow the data line */
        1: 1544:    c->sbytes = vlen;
        -: 1545:
        -: 1546:    // Note: no errors possible after the item was successfully allocated.
        -: 1547:    // So we're just looking at dumping error codes and returning.
        1: 1548:    out_errstring(c, errstr);
        -: 1549:    // TODO: pass state in? else switching twice meh.
        1: 1550:    conn_set_state(c, conn_swallow);
        -: 1551:}
        -: 1552:
        4: 1553:static void process_mdelete_command(conn *c, token_t *tokens, const size_t ntokens) {
        4: 1554:    char *key;
        4: 1555:    size_t nkey;
        4: 1556:    item *it = NULL;
        4: 1557:    int i;
        4: 1558:    uint32_t hv;
        4: 1559:    struct _meta_flags of = {0}; // option bitflags.
        4: 1560:    char *errstr = "CLIENT_ERROR bad command line format";
       4*: 1561:    assert(c != NULL);
        4: 1562:    mc_resp *resp = c->resp;
        -: 1563:    // reserve 3 bytes for status code
        4: 1564:    char *p = resp->wbuf + 3;
        -: 1565:
       8*: 1566:    WANT_TOKENS_MIN(ntokens, 3);
        -: 1567:
        -: 1568:    // TODO: most of this is identical to mget.
        4: 1569:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1570:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 1571:        return;
        -: 1572:    }
        -: 1573:
        4: 1574:    if (ntokens > MFLAG_MAX_OPT_LENGTH) {
    #####: 1575:        out_string(c, "CLIENT_ERROR options flags too long");
    #####: 1576:        return;
        -: 1577:    }
        -: 1578:
        -: 1579:    // scrubs duplicated options and sets flags for how to load the item.
        -: 1580:    // we pass in the first token that should be a flag.
        -: 1581:    // FIXME: not using the preparse errstr?
        4: 1582:    if (_meta_flag_preparse(tokens, 2, &of, &errstr) != 0) {
    #####: 1583:        out_errstring(c, "CLIENT_ERROR invalid or duplicate flag");
    #####: 1584:        return;
        -: 1585:    }
        4: 1586:    assert(c != NULL);
        4: 1587:    c->noreply = of.no_reply;
        -: 1588:
        4: 1589:    key = tokens[KEY_TOKEN].value;
        4: 1590:    nkey = tokens[KEY_TOKEN].length;
        -: 1591:
        9: 1592:    for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
        5: 1593:        switch (tokens[i].value[0]) {
        -: 1594:            // TODO: macro perhaps?
    #####: 1595:            case 'O':
    #####: 1596:                if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1597:                    errstr = "CLIENT_ERROR opaque token too long";
    #####: 1598:                    goto error;
        -: 1599:                }
    #####: 1600:                META_SPACE(p);
    #####: 1601:                memcpy(p, tokens[i].value, tokens[i].length);
    #####: 1602:                p += tokens[i].length;
    #####: 1603:                break;
    #####: 1604:            case 'k':
    #####: 1605:                META_KEY(p, key, nkey, of.key_binary);
        -: 1606:                break;
        -: 1607:        }
        -: 1608:    }
        -: 1609:
        4: 1610:    it = item_get_locked(key, nkey, c, DONT_UPDATE, &hv);
        4: 1611:    if (it) {
        4: 1612:        MEMCACHED_COMMAND_DELETE(c->sfd, ITEM_key(it), it->nkey);
        -: 1613:
        -: 1614:        // allow only deleting/marking if a CAS value matches.
        4: 1615:        if (of.has_cas && ITEM_get_cas(it) != of.req_cas_id) {
        1: 1616:            pthread_mutex_lock(&c->thread->stats.mutex);
        1: 1617:            c->thread->stats.delete_misses++;
        1: 1618:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1619:
        1: 1620:            memcpy(resp->wbuf, "EX ", 3);
        1: 1621:            goto cleanup;
        -: 1622:        }
        -: 1623:
        -: 1624:        // If we're to set this item as stale, we don't actually want to
        -: 1625:        // delete it. We mark the stale bit, bump CAS, and update exptime if
        -: 1626:        // we were supplied a new TTL.
        3: 1627:        if (of.set_stale) {
        1: 1628:            if (of.new_ttl) {
        1: 1629:                it->exptime = of.exptime;
        -: 1630:            }
        1: 1631:            it->it_flags |= ITEM_STALE;
        -: 1632:            // Also need to remove TOKEN_SENT, so next client can win.
        1: 1633:            it->it_flags &= ~ITEM_TOKEN_SENT;
        -: 1634:
        1: 1635:            ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
        -: 1636:
        -: 1637:            // Clients can noreply nominal responses.
        1: 1638:            if (c->noreply)
    #####: 1639:                resp->skip = true;
        1: 1640:            if (settings.meta_response_old) {
    #####: 1641:                memcpy(resp->wbuf, "OK ", 3);
        -: 1642:            } else {
        1: 1643:                memcpy(resp->wbuf, "HD ", 3);
        -: 1644:            }
        -: 1645:        } else {
        2: 1646:            pthread_mutex_lock(&c->thread->stats.mutex);
        2: 1647:            c->thread->stats.slab_stats[ITEM_clsid(it)].delete_hits++;
        2: 1648:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1649:
        2: 1650:            do_item_unlink(it, hv);
        2: 1651:            STORAGE_delete(c->thread->storage, it);
        2: 1652:            if (c->noreply)
        1: 1653:                resp->skip = true;
        2: 1654:            if (settings.meta_response_old) {
    #####: 1655:                memcpy(resp->wbuf, "OK ", 3);
        -: 1656:            } else {
        2: 1657:                memcpy(resp->wbuf, "HD ", 3);
        -: 1658:            }
        -: 1659:        }
        3: 1660:        goto cleanup;
        -: 1661:    } else {
    #####: 1662:        pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 1663:        c->thread->stats.delete_misses++;
    #####: 1664:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1665:
    #####: 1666:        memcpy(resp->wbuf, "NF ", 3);
    #####: 1667:        goto cleanup;
        -: 1668:    }
        4: 1669:cleanup:
        4: 1670:    if (it) {
        4: 1671:        do_item_remove(it);
        -: 1672:    }
        -: 1673:    // Item is always returned locked, even if missing.
        4: 1674:    item_unlock(hv);
        4: 1675:    resp->wbytes = p - resp->wbuf;
        4: 1676:    memcpy(resp->wbuf + resp->wbytes, "\r\n", 2);
        4: 1677:    resp->wbytes += 2;
        4: 1678:    resp_add_iov(resp, resp->wbuf, resp->wbytes);
        4: 1679:    conn_set_state(c, conn_new_cmd);
        4: 1680:    return;
    #####: 1681:error:
    #####: 1682:    out_errstring(c, errstr);
        -: 1683:}
        -: 1684:
       15: 1685:static void process_marithmetic_command(conn *c, token_t *tokens, const size_t ntokens) {
       15: 1686:    char *key;
       15: 1687:    size_t nkey;
       15: 1688:    int i;
       15: 1689:    struct _meta_flags of = {0}; // option bitflags.
       15: 1690:    char *errstr = "CLIENT_ERROR bad command line format";
      15*: 1691:    assert(c != NULL);
       15: 1692:    mc_resp *resp = c->resp;
        -: 1693:    // no reservation (like del/set) since we post-process the status line.
       15: 1694:    char *p = resp->wbuf;
        -: 1695:
        -: 1696:    // If no argument supplied, incr or decr by one.
       15: 1697:    of.delta = 1;
       15: 1698:    of.initial = 0; // redundant, for clarity.
       15: 1699:    bool incr = true; // default mode is to increment.
       15: 1700:    bool locked = false;
       15: 1701:    uint32_t hv = 0;
       15: 1702:    item *it = NULL; // item returned by do_add_delta.
        -: 1703:
      29*: 1704:    WANT_TOKENS_MIN(ntokens, 3);
        -: 1705:
        -: 1706:    // TODO: most of this is identical to mget.
       15: 1707:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1708:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 1709:        return;
        -: 1710:    }
        -: 1711:
       15: 1712:    if (ntokens > MFLAG_MAX_OPT_LENGTH) {
    #####: 1713:        out_string(c, "CLIENT_ERROR options flags too long");
    #####: 1714:        return;
        -: 1715:    }
        -: 1716:
        -: 1717:    // scrubs duplicated options and sets flags for how to load the item.
        -: 1718:    // we pass in the first token that should be a flag.
       15: 1719:    if (_meta_flag_preparse(tokens, 2, &of, &errstr) != 0) {
    #####: 1720:        out_errstring(c, "CLIENT_ERROR invalid or duplicate flag");
    #####: 1721:        return;
        -: 1722:    }
       15: 1723:    assert(c != NULL);
       15: 1724:    c->noreply = of.no_reply;
        -: 1725:
       15: 1726:    key = tokens[KEY_TOKEN].value;
       15: 1727:    nkey = tokens[KEY_TOKEN].length;
        -: 1728:
        -: 1729:    // "mode switch" to alternative commands
       15: 1730:    switch (of.mode) {
        -: 1731:        case 0: // no switch supplied.
        -: 1732:            break;
        -: 1733:        case 'I': // Incr (default)
        -: 1734:        case '+':
        -: 1735:            incr = true;
        -: 1736:            break;
        2: 1737:        case 'D': // Decr.
        -: 1738:        case '-':
        2: 1739:            incr = false;
        2: 1740:            break;
    #####: 1741:        default:
    #####: 1742:            errstr = "CLIENT_ERROR invalid mode for ma M token";
    #####: 1743:            goto error;
       15: 1744:            break;
        -: 1745:    }
        -: 1746:
        -: 1747:    // take hash value and manually lock item... hold lock during store phase
        -: 1748:    // on miss and avoid recalculating the hash multiple times.
       15: 1749:    hv = hash(key, nkey);
       15: 1750:    item_lock(hv);
       15: 1751:    locked = true;
       15: 1752:    char tmpbuf[INCR_MAX_STORAGE_LEN];
        -: 1753:
        -: 1754:    // return a referenced item if it exists, so we can modify it here, rather
        -: 1755:    // than adding even more parameters to do_add_delta.
       15: 1756:    bool item_created = false;
       15: 1757:    switch(do_add_delta(c, key, nkey, incr, of.delta, tmpbuf, &of.req_cas_id, hv, &it)) {
        8: 1758:    case OK:
        8: 1759:        if (c->noreply)
        1: 1760:            resp->skip = true;
        8: 1761:        if (settings.meta_response_old) {
    #####: 1762:            memcpy(resp->wbuf, "OK ", 3);
        -: 1763:        } else {
        8: 1764:            memcpy(resp->wbuf, "HD ", 3);
        -: 1765:        }
        -: 1766:        break;
        1: 1767:    case NON_NUMERIC:
        1: 1768:        errstr = "CLIENT_ERROR cannot increment or decrement non-numeric value";
        1: 1769:        goto error;
    #####: 1770:        break;
    #####: 1771:    case NON_POSITIVE:
    #####: 1772:        errstr = "CLIENT_ERROR cannot divide non-positive value";
    #####: 1773:        goto error;
    #####: 1774:        break;
    #####: 1775:    case EOM:
    #####: 1776:        errstr = "SERVER_ERROR out of memory";
    #####: 1777:        goto error;
        5: 1778:        break;
        5: 1779:    case DELTA_ITEM_NOT_FOUND:
        5: 1780:        if (of.vivify) {
        3: 1781:            itoa_u64(of.initial, tmpbuf);
        3: 1782:            int vlen = strlen(tmpbuf);
        -: 1783:
        3: 1784:            it = item_alloc(key, nkey, 0, 0, vlen+2);
        3: 1785:            if (it != NULL) {
        3: 1786:                memcpy(ITEM_data(it), tmpbuf, vlen);
        3: 1787:                memcpy(ITEM_data(it) + vlen, "\r\n", 2);
        3: 1788:                if (do_store_item(it, NREAD_ADD, c, hv)) {
        -: 1789:                    item_created = true;
        -: 1790:                } else {
        -: 1791:                    // Not sure how we can get here if we're holding the lock.
    #####: 1792:                    memcpy(resp->wbuf, "NS ", 3);
        -: 1793:                }
        -: 1794:            } else {
    #####: 1795:                errstr = "SERVER_ERROR Out of memory allocating new item";
    #####: 1796:                goto error;
        -: 1797:            }
        -: 1798:        } else {
        2: 1799:            pthread_mutex_lock(&c->thread->stats.mutex);
        2: 1800:            if (incr) {
        2: 1801:                c->thread->stats.incr_misses++;
        -: 1802:            } else {
    #####: 1803:                c->thread->stats.decr_misses++;
        -: 1804:            }
        2: 1805:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1806:            // won't have a valid it here.
        2: 1807:            memcpy(p, "NF ", 3);
        2: 1808:            p += 3;
        -: 1809:        }
        -: 1810:        break;
        -: 1811:    case DELTA_ITEM_CAS_MISMATCH:
        -: 1812:        // also returns without a valid it.
        1: 1813:        memcpy(p, "EX ", 3);
        1: 1814:        p += 3;
        1: 1815:        break;
        -: 1816:    }
        -: 1817:
        -: 1818:    // final loop
        -: 1819:    // allows building the response with information after vivifying from a
        -: 1820:    // miss, or returning a new CAS value after add_delta().
       14: 1821:    if (it) {
       11: 1822:        size_t vlen = strlen(tmpbuf);
       11: 1823:        if (of.value) {
        8: 1824:            memcpy(p, "VA ", 3);
        8: 1825:            p = itoa_u32(vlen, p+3);
        -: 1826:        } else {
        3: 1827:            if (settings.meta_response_old) {
    #####: 1828:                memcpy(p, "OK", 2);
        -: 1829:            } else {
        3: 1830:                memcpy(p, "HD", 2);
        -: 1831:            }
        3: 1832:            p += 2;
        -: 1833:        }
        -: 1834:
       49: 1835:        for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
       38: 1836:            switch (tokens[i].value[0]) {
        2: 1837:                case 'c':
        2: 1838:                    META_CHAR(p, 'c');
        2: 1839:                    p = itoa_u64(ITEM_get_cas(it), p);
        2: 1840:                    break;
        6: 1841:                case 't':
        6: 1842:                    META_CHAR(p, 't');
        6: 1843:                    if (it->exptime == 0) {
        5: 1844:                        *p = '-';
        5: 1845:                        *(p+1) = '1';
        5: 1846:                        p += 2;
        -: 1847:                    } else {
        1: 1848:                        p = itoa_u32(it->exptime - current_time, p);
        -: 1849:                    }
        -: 1850:                    break;
        1: 1851:                case 'T':
        1: 1852:                    it->exptime = of.exptime;
        1: 1853:                    break;
        8: 1854:                case 'N':
        8: 1855:                    if (item_created) {
        3: 1856:                        it->exptime = of.autoviv_exptime;
        -: 1857:                    }
        -: 1858:                    break;
        -: 1859:                // TODO: macro perhaps?
    #####: 1860:                case 'O':
    #####: 1861:                    if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1862:                        errstr = "CLIENT_ERROR opaque token too long";
    #####: 1863:                        goto error;
        -: 1864:                    }
    #####: 1865:                    META_SPACE(p);
    #####: 1866:                    memcpy(p, tokens[i].value, tokens[i].length);
    #####: 1867:                    p += tokens[i].length;
    #####: 1868:                    break;
    #####: 1869:                case 'k':
    #####: 1870:                    META_KEY(p, key, nkey, of.key_binary);
        -: 1871:                    break;
        -: 1872:            }
        -: 1873:        }
        -: 1874:
       11: 1875:        if (of.value) {
        8: 1876:            *p = '\r';
        8: 1877:            *(p+1) = '\n';
        8: 1878:            p += 2;
        8: 1879:            memcpy(p, tmpbuf, vlen);
        8: 1880:            p += vlen;
        -: 1881:        }
        -: 1882:
       11: 1883:        do_item_remove(it);
        -: 1884:    } else {
        -: 1885:        // No item to handle. still need to return opaque/key tokens
        7: 1886:        for (i = KEY_TOKEN+1; i < ntokens-1; i++) {
        4: 1887:            switch (tokens[i].value[0]) {
        -: 1888:                // TODO: macro perhaps?
    #####: 1889:                case 'O':
    #####: 1890:                    if (tokens[i].length > MFLAG_MAX_OPAQUE_LENGTH) {
    #####: 1891:                        errstr = "CLIENT_ERROR opaque token too long";
    #####: 1892:                        goto error;
        -: 1893:                    }
    #####: 1894:                    META_SPACE(p);
    #####: 1895:                    memcpy(p, tokens[i].value, tokens[i].length);
    #####: 1896:                    p += tokens[i].length;
    #####: 1897:                    break;
    #####: 1898:                case 'k':
    #####: 1899:                    META_KEY(p, key, nkey, of.key_binary);
        -: 1900:                    break;
        -: 1901:            }
        -: 1902:        }
        -: 1903:    }
        -: 1904:
       14: 1905:    item_unlock(hv);
        -: 1906:
       14: 1907:    resp->wbytes = p - resp->wbuf;
       14: 1908:    memcpy(resp->wbuf + resp->wbytes, "\r\n", 2);
       14: 1909:    resp->wbytes += 2;
       14: 1910:    resp_add_iov(resp, resp->wbuf, resp->wbytes);
       14: 1911:    conn_set_state(c, conn_new_cmd);
       14: 1912:    return;
        1: 1913:error:
        1: 1914:    if (it != NULL)
    #####: 1915:        do_item_remove(it);
        1: 1916:    if (locked)
        1: 1917:        item_unlock(hv);
        1: 1918:    out_errstring(c, errstr);
        -: 1919:}
        -: 1920:
        -: 1921:
   301542: 1922:static void process_update_command(conn *c, token_t *tokens, const size_t ntokens, int comm, bool handle_cas) {
   301542: 1923:    char *key;
   301542: 1924:    size_t nkey;
   301542: 1925:    unsigned int flags;
   301542: 1926:    int32_t exptime_int = 0;
   301542: 1927:    rel_time_t exptime = 0;
   301542: 1928:    int vlen;
   301542: 1929:    uint64_t req_cas_id=0;
   301542: 1930:    item *it;
        -: 1931:
  301542*: 1932:    assert(c != NULL);
        -: 1933:
   301542: 1934:    set_noreply_maybe(c, tokens, ntokens);
        -: 1935:
   301542: 1936:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 1937:        out_string(c, "CLIENT_ERROR bad command line format");
      16*: 1938:        return;
        -: 1939:    }
        -: 1940:
   301542: 1941:    key = tokens[KEY_TOKEN].value;
   301542: 1942:    nkey = tokens[KEY_TOKEN].length;
        -: 1943:
   603082: 1944:    if (! (safe_strtoul(tokens[2].value, (uint32_t *)&flags)
   301541: 1945:           && safe_strtol(tokens[3].value, &exptime_int)
   301540: 1946:           && safe_strtol(tokens[4].value, (int32_t *)&vlen))) {
        3: 1947:        out_string(c, "CLIENT_ERROR bad command line format");
        3: 1948:        return;
        -: 1949:    }
        -: 1950:
   603077: 1951:    exptime = realtime(EXPTIME_TO_POSITIVE_TIME(exptime_int));
        -: 1952:
        -: 1953:    // does cas value exist?
   301539: 1954:    if (handle_cas) {
       13: 1955:        if (!safe_strtoull(tokens[5].value, &req_cas_id)) {
        1: 1956:            out_string(c, "CLIENT_ERROR bad command line format");
        1: 1957:            return;
        -: 1958:        }
        -: 1959:    }
        -: 1960:
   301538: 1961:    if (vlen < 0 || vlen > (INT_MAX - 2)) {
        3: 1962:        out_string(c, "CLIENT_ERROR bad command line format");
        3: 1963:        return;
        -: 1964:    }
   301535: 1965:    vlen += 2;
        -: 1966:
   301535: 1967:    if (settings.detail_enabled) {
      101: 1968:        stats_prefix_record_set(key, nkey);
        -: 1969:    }
        -: 1970:
   301535: 1971:    it = item_alloc(key, nkey, flags, exptime, vlen);
        -: 1972:
   301535: 1973:    if (it == 0) {
        9: 1974:        enum store_item_type status;
        9: 1975:        if (! item_size_ok(nkey, flags, vlen)) {
        4: 1976:            out_string(c, "SERVER_ERROR object too large for cache");
        4: 1977:            status = TOO_LARGE;
        4: 1978:            pthread_mutex_lock(&c->thread->stats.mutex);
        4: 1979:            c->thread->stats.store_too_large++;
        4: 1980:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1981:        } else {
        5: 1982:            out_of_memory(c, "SERVER_ERROR out of memory storing object");
        5: 1983:            status = NO_MEMORY;
        5: 1984:            pthread_mutex_lock(&c->thread->stats.mutex);
        5: 1985:            c->thread->stats.store_no_memory++;
        5: 1986:            pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 1987:        }
       9*: 1988:        LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE,
        -: 1989:                NULL, status, comm, key, nkey, 0, 0, c->sfd);
        -: 1990:        /* swallow the data line */
        9: 1991:        conn_set_state(c, conn_swallow);
        9: 1992:        c->sbytes = vlen;
        -: 1993:
        -: 1994:        /* Avoid stale data persisting in cache because we failed alloc.
        -: 1995:         * Unacceptable for SET. Anywhere else too? */
        9: 1996:        if (comm == NREAD_SET) {
        9: 1997:            it = item_get(key, nkey, c, DONT_UPDATE);
        9: 1998:            if (it) {
        2: 1999:                item_unlink(it);
        2: 2000:                STORAGE_delete(c->thread->storage, it);
        2: 2001:                item_remove(it);
        -: 2002:            }
        -: 2003:        }
        -: 2004:
        9: 2005:        return;
        -: 2006:    }
   301526: 2007:    ITEM_set_cas(it, req_cas_id);
        -: 2008:
   301526: 2009:    c->item = it;
        -: 2010:#ifdef NEED_ALIGN
        -: 2011:    if (it->it_flags & ITEM_CHUNKED) {
        -: 2012:        c->ritem = ITEM_schunk(it);
        -: 2013:    } else {
        -: 2014:        c->ritem = ITEM_data(it);
        -: 2015:    }
        -: 2016:#else
   301526: 2017:    c->ritem = ITEM_data(it);
        -: 2018:#endif
   301526: 2019:    c->rlbytes = it->nbytes;
   301526: 2020:    c->cmd = comm;
   301526: 2021:    conn_set_state(c, conn_nread);
        -: 2022:}
        -: 2023:
     2004: 2024:static void process_touch_command(conn *c, token_t *tokens, const size_t ntokens) {
     2004: 2025:    char *key;
     2004: 2026:    size_t nkey;
     2004: 2027:    int32_t exptime_int = 0;
     2004: 2028:    rel_time_t exptime = 0;
     2004: 2029:    item *it;
        -: 2030:
    2004*: 2031:    assert(c != NULL);
        -: 2032:
     2004: 2033:    set_noreply_maybe(c, tokens, ntokens);
        -: 2034:
     2004: 2035:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 2036:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2037:        return;
        -: 2038:    }
        -: 2039:
     2004: 2040:    key = tokens[KEY_TOKEN].value;
     2004: 2041:    nkey = tokens[KEY_TOKEN].length;
        -: 2042:
     2004: 2043:    if (!safe_strtol(tokens[2].value, &exptime_int)) {
    #####: 2044:        out_string(c, "CLIENT_ERROR invalid exptime argument");
    #####: 2045:        return;
        -: 2046:    }
        -: 2047:
     4007: 2048:    exptime = realtime(EXPTIME_TO_POSITIVE_TIME(exptime_int));
     2004: 2049:    it = item_touch(key, nkey, exptime, c);
     2004: 2050:    if (it) {
     2004: 2051:        pthread_mutex_lock(&c->thread->stats.mutex);
     2004: 2052:        c->thread->stats.touch_cmds++;
     2004: 2053:        c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;
     2004: 2054:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2055:
     2004: 2056:        out_string(c, "TOUCHED");
     2004: 2057:        item_remove(it);
        -: 2058:    } else {
    #####: 2059:        pthread_mutex_lock(&c->thread->stats.mutex);
    #####: 2060:        c->thread->stats.touch_cmds++;
    #####: 2061:        c->thread->stats.touch_misses++;
    #####: 2062:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2063:
    #####: 2064:        out_string(c, "NOT_FOUND");
        -: 2065:   }
        -: 2066:}
        -: 2067:
      273: 2068:static void process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const int incr) {
      273: 2069:    char temp[INCR_MAX_STORAGE_LEN];
      273: 2070:    uint64_t delta;
      273: 2071:    char *key;
      273: 2072:    size_t nkey;
        -: 2073:
     273*: 2074:    assert(c != NULL);
        -: 2075:
      273: 2076:    set_noreply_maybe(c, tokens, ntokens);
        -: 2077:
      273: 2078:    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {
    #####: 2079:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2080:        return;
        -: 2081:    }
        -: 2082:
      273: 2083:    key = tokens[KEY_TOKEN].value;
      273: 2084:    nkey = tokens[KEY_TOKEN].length;
        -: 2085:
      273: 2086:    if (!safe_strtoull(tokens[2].value, &delta)) {
    #####: 2087:        out_string(c, "CLIENT_ERROR invalid numeric delta argument");
    #####: 2088:        return;
        -: 2089:    }
        -: 2090:
      273: 2091:    switch(add_delta(c, key, nkey, incr, delta, temp, NULL)) {
      267: 2092:    case OK:
      267: 2093:        out_string(c, temp);
      267: 2094:        break;
        2: 2095:    case NON_NUMERIC:
        2: 2096:        out_string(c, "CLIENT_ERROR cannot increment or decrement non-numeric value");
        2: 2097:        break;
    #####: 2098:    case NON_POSITIVE:
    #####: 2099:        out_string(c, "CLIENT_ERROR cannot divide non-positive value");
    #####: 2100:        break;
    #####: 2101:    case EOM:
    #####: 2102:        out_of_memory(c, "SERVER_ERROR out of memory");
    #####: 2103:        break;
        4: 2104:    case DELTA_ITEM_NOT_FOUND:
        4: 2105:        pthread_mutex_lock(&c->thread->stats.mutex);
        4: 2106:        if (incr) {
        1: 2107:            c->thread->stats.incr_misses++;
        -: 2108:        } else {
        3: 2109:            c->thread->stats.decr_misses++;
        -: 2110:        }
        4: 2111:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2112:
        4: 2113:        out_string(c, "NOT_FOUND");
        4: 2114:        break;
        -: 2115:    case DELTA_ITEM_CAS_MISMATCH:
        -: 2116:        break; /* Should never get here */
        -: 2117:    }
        -: 2118:}
        -: 2119:
        -: 2120:
   141090: 2121:static void process_delete_command(conn *c, token_t *tokens, const size_t ntokens) {
   141090: 2122:    char *key;
   141090: 2123:    size_t nkey;
   141090: 2124:    item *it;
   141090: 2125:    uint32_t hv;
        -: 2126:
  141090*: 2127:    assert(c != NULL);
        -: 2128:
   141090: 2129:    if (ntokens > 3) {
     9852: 2130:        bool hold_is_zero = strcmp(tokens[KEY_TOKEN+1].value, "0") == 0;
     9852: 2131:        bool sets_noreply = set_noreply_maybe(c, tokens, ntokens);
     9850: 2132:        bool valid = (ntokens == 4 && (hold_is_zero || sets_noreply))
     9853: 2133:            || (ntokens == 5 && hold_is_zero && sets_noreply);
     9852: 2134:        if (!valid) {
        2: 2135:            out_string(c, "CLIENT_ERROR bad command line format.  "
        -: 2136:                       "Usage: delete <key> [noreply]");
        4: 2137:            return;
        -: 2138:        }
        -: 2139:    }
        -: 2140:
        -: 2141:
   141088: 2142:    key = tokens[KEY_TOKEN].value;
   141088: 2143:    nkey = tokens[KEY_TOKEN].length;
        -: 2144:
   141088: 2145:    if(nkey > KEY_MAX_LENGTH) {
    #####: 2146:        out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2147:        return;
        -: 2148:    }
        -: 2149:
   141088: 2150:    if (settings.detail_enabled) {
        1: 2151:        stats_prefix_record_delete(key, nkey);
        -: 2152:    }
        -: 2153:
   141088: 2154:    it = item_get_locked(key, nkey, c, DONT_UPDATE, &hv);
   141088: 2155:    if (it) {
   141080: 2156:        MEMCACHED_COMMAND_DELETE(c->sfd, ITEM_key(it), it->nkey);
        -: 2157:
   141080: 2158:        pthread_mutex_lock(&c->thread->stats.mutex);
   141080: 2159:        c->thread->stats.slab_stats[ITEM_clsid(it)].delete_hits++;
   141080: 2160:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2161:
   141080: 2162:        do_item_unlink(it, hv);
   141080: 2163:        STORAGE_delete(c->thread->storage, it);
   141080: 2164:        do_item_remove(it);      /* release our reference */
   141080: 2165:        out_string(c, "DELETED");
        -: 2166:    } else {
        8: 2167:        pthread_mutex_lock(&c->thread->stats.mutex);
        8: 2168:        c->thread->stats.delete_misses++;
        8: 2169:        pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2170:
        8: 2171:        out_string(c, "NOT_FOUND");
        -: 2172:    }
   141088: 2173:    item_unlock(hv);
        -: 2174:}
        -: 2175:
        2: 2176:static void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {
        2: 2177:    unsigned int level;
        -: 2178:
       2*: 2179:    assert(c != NULL);
        -: 2180:
        2: 2181:    set_noreply_maybe(c, tokens, ntokens);
        -: 2182:
        2: 2183:    if (!safe_strtoul(tokens[1].value, (uint32_t*)&level)) {
        1: 2184:        out_string(c, "CLIENT_ERROR bad command line format");
        1: 2185:        return;
        -: 2186:    }
        1: 2187:    settings.verbose = level > MAX_VERBOSITY_LEVEL ? MAX_VERBOSITY_LEVEL : level;
        1: 2188:    out_string(c, "OK");
        1: 2189:    return;
        -: 2190:}
        -: 2191:
        -: 2192:#ifdef MEMCACHED_DEBUG
    #####: 2193:static void process_misbehave_command(conn *c) {
    #####: 2194:    int allowed = 0;
        -: 2195:
        -: 2196:    // try opening new TCP socket
    #####: 2197:    int i = socket(AF_INET, SOCK_STREAM, 0);
    #####: 2198:    if (i != -1) {
    #####: 2199:        allowed++;
    #####: 2200:        close(i);
        -: 2201:    }
        -: 2202:
        -: 2203:    // try executing new commands
    #####: 2204:    i = system("sleep 0");
    #####: 2205:    if (i != -1) {
    #####: 2206:        allowed++;
        -: 2207:    }
        -: 2208:
    #####: 2209:    if (allowed) {
    #####: 2210:        out_string(c, "ERROR");
        -: 2211:    } else {
    #####: 2212:        out_string(c, "OK");
        -: 2213:    }
    #####: 2214:}
        -: 2215:
        5: 2216:static void process_debugtime_command(conn *c, token_t *tokens, const size_t ntokens) {
        5: 2217:    if (strcmp(tokens[1].value, "p") == 0) {
    #####: 2218:        if (!is_paused) {
    #####: 2219:            is_paused = true;
        -: 2220:        }
        5: 2221:    } else if (strcmp(tokens[1].value, "r") == 0) {
    #####: 2222:        if (is_paused) {
    #####: 2223:            is_paused = false;
        -: 2224:        }
        -: 2225:    } else {
        5: 2226:        int64_t time_delta = 0;
        5: 2227:        if (!safe_strtoll(tokens[1].value, &time_delta)) {
    #####: 2228:            out_string(c, "ERROR");
    #####: 2229:            return;
        -: 2230:        }
        5: 2231:        delta += time_delta;
        5: 2232:        current_time += delta;
        -: 2233:    }
        5: 2234:    out_string(c, "OK");
        -: 2235:}
        -: 2236:#endif
        -: 2237:
        2: 2238:static void process_slabs_automove_command(conn *c, token_t *tokens, const size_t ntokens) {
        2: 2239:    unsigned int level;
        2: 2240:    double ratio;
        -: 2241:
       2*: 2242:    assert(c != NULL);
        -: 2243:
        2: 2244:    set_noreply_maybe(c, tokens, ntokens);
        -: 2245:
        2: 2246:    if (strcmp(tokens[2].value, "ratio") == 0) {
    #####: 2247:        if (ntokens < 5 || !safe_strtod(tokens[3].value, &ratio)) {
    #####: 2248:            out_string(c, "ERROR");
    #####: 2249:            return;
        -: 2250:        }
    #####: 2251:        settings.slab_automove_ratio = ratio;
        -: 2252:    } else {
        2: 2253:        if (!safe_strtoul(tokens[2].value, (uint32_t*)&level)) {
        1: 2254:            out_string(c, "CLIENT_ERROR bad command line format");
        1: 2255:            return;
        -: 2256:        }
        1: 2257:        if (level == 0) {
        1: 2258:            settings.slab_automove = 0;
    #####: 2259:        } else if (level == 1 || level == 2) {
    #####: 2260:            settings.slab_automove = level;
        -: 2261:        } else {
    #####: 2262:            out_string(c, "ERROR");
    #####: 2263:            return;
        -: 2264:        }
        -: 2265:    }
        1: 2266:    out_string(c, "OK");
        1: 2267:    return;
        -: 2268:}
        -: 2269:
        -: 2270:/* TODO: decide on syntax for sampling? */
       11: 2271:static void process_watch_command(conn *c, token_t *tokens, const size_t ntokens) {
       11: 2272:    uint16_t f = 0;
       11: 2273:    int x;
      11*: 2274:    assert(c != NULL);
        -: 2275:
       11: 2276:    set_noreply_maybe(c, tokens, ntokens);
       11: 2277:    if (!settings.watch_enabled) {
        1: 2278:        out_string(c, "CLIENT_ERROR watch commands not allowed");
        1: 2279:        return;
        -: 2280:    }
        -: 2281:
       10: 2282:    if (resp_has_stack(c)) {
    #####: 2283:        out_string(c, "ERROR cannot pipeline other commands before watch");
    #####: 2284:        return;
        -: 2285:    }
        -: 2286:
       10: 2287:    if (ntokens > 2) {
       22: 2288:        for (x = COMMAND_TOKEN + 1; x < ntokens - 1; x++) {
       13: 2289:            if ((strcmp(tokens[x].value, "rawcmds") == 0)) {
    #####: 2290:                f |= LOG_RAWCMDS;
       13: 2291:            } else if ((strcmp(tokens[x].value, "evictions") == 0)) {
        2: 2292:                f |= LOG_EVICTIONS;
       11: 2293:            } else if ((strcmp(tokens[x].value, "fetchers") == 0)) {
        5: 2294:                f |= LOG_FETCHERS;
        6: 2295:            } else if ((strcmp(tokens[x].value, "mutations") == 0)) {
        5: 2296:                f |= LOG_MUTATIONS;
        1: 2297:            } else if ((strcmp(tokens[x].value, "sysevents") == 0)) {
    #####: 2298:                f |= LOG_SYSEVENTS;
        1: 2299:            } else if ((strcmp(tokens[x].value, "connevents") == 0)) {
        1: 2300:                f |= LOG_CONNEVENTS;
    #####: 2301:            } else if ((strcmp(tokens[x].value, "proxyreqs") == 0)) {
    #####: 2302:                f |= LOG_PROXYREQS;
    #####: 2303:            } else if ((strcmp(tokens[x].value, "proxyevents") == 0)) {
    #####: 2304:                f |= LOG_PROXYEVENTS;
    #####: 2305:            } else if ((strcmp(tokens[x].value, "proxyuser") == 0)) {
    #####: 2306:                f |= LOG_PROXYUSER;
        -: 2307:            } else {
    #####: 2308:                out_string(c, "ERROR");
    #####: 2309:                return;
        -: 2310:            }
        -: 2311:        }
        -: 2312:    } else {
        -: 2313:        f |= LOG_FETCHERS;
        -: 2314:    }
        -: 2315:
       10: 2316:    switch(logger_add_watcher(c, c->sfd, f)) {
    #####: 2317:        case LOGGER_ADD_WATCHER_TOO_MANY:
    #####: 2318:            out_string(c, "WATCHER_TOO_MANY log watcher limit reached");
    #####: 2319:            break;
    #####: 2320:        case LOGGER_ADD_WATCHER_FAILED:
    #####: 2321:            out_string(c, "WATCHER_FAILED failed to add log watcher");
    #####: 2322:            break;
       10: 2323:        case LOGGER_ADD_WATCHER_OK:
       10: 2324:            conn_set_state(c, conn_watch);
       10: 2325:            event_del(&c->event);
       10: 2326:            break;
        -: 2327:    }
        -: 2328:}
        -: 2329:
        3: 2330:static void process_memlimit_command(conn *c, token_t *tokens, const size_t ntokens) {
        3: 2331:    uint32_t memlimit;
       3*: 2332:    assert(c != NULL);
        -: 2333:
        3: 2334:    set_noreply_maybe(c, tokens, ntokens);
        -: 2335:
        3: 2336:    if (!safe_strtoul(tokens[1].value, &memlimit)) {
    #####: 2337:        out_string(c, "ERROR");
        -: 2338:    } else {
        3: 2339:        if (memlimit < 8) {
    #####: 2340:            out_string(c, "MEMLIMIT_TOO_SMALL cannot set maxbytes to less than 8m");
        -: 2341:        } else {
        3: 2342:            if (memlimit > 1000000000) {
    #####: 2343:                out_string(c, "MEMLIMIT_ADJUST_FAILED input value is megabytes not bytes");
        3: 2344:            } else if (slabs_adjust_mem_limit((size_t) memlimit * 1024 * 1024)) {
        3: 2345:                if (settings.verbose > 0) {
    #####: 2346:                    fprintf(stderr, "maxbytes adjusted to %llum\n", (unsigned long long)memlimit);
        -: 2347:                }
        -: 2348:
        3: 2349:                out_string(c, "OK");
        -: 2350:            } else {
    #####: 2351:                out_string(c, "MEMLIMIT_ADJUST_FAILED out of bounds or unable to adjust");
        -: 2352:            }
        -: 2353:        }
        -: 2354:    }
        3: 2355:}
        -: 2356:
    #####: 2357:static void process_lru_command(conn *c, token_t *tokens, const size_t ntokens) {
    #####: 2358:    uint32_t pct_hot;
    #####: 2359:    uint32_t pct_warm;
    #####: 2360:    double hot_factor;
    #####: 2361:    int32_t ttl;
    #####: 2362:    double factor;
        -: 2363:
    #####: 2364:    set_noreply_maybe(c, tokens, ntokens);
        -: 2365:
    #####: 2366:    if (strcmp(tokens[1].value, "tune") == 0 && ntokens >= 7) {
    #####: 2367:        if (!safe_strtoul(tokens[2].value, &pct_hot) ||
    #####: 2368:            !safe_strtoul(tokens[3].value, &pct_warm) ||
    #####: 2369:            !safe_strtod(tokens[4].value, &hot_factor) ||
    #####: 2370:            !safe_strtod(tokens[5].value, &factor)) {
    #####: 2371:            out_string(c, "ERROR");
        -: 2372:        } else {
    #####: 2373:            if (pct_hot + pct_warm > 80) {
    #####: 2374:                out_string(c, "ERROR hot and warm pcts must not exceed 80");
    #####: 2375:            } else if (factor <= 0 || hot_factor <= 0) {
    #####: 2376:                out_string(c, "ERROR hot/warm age factors must be greater than 0");
        -: 2377:            } else {
    #####: 2378:                settings.hot_lru_pct = pct_hot;
    #####: 2379:                settings.warm_lru_pct = pct_warm;
    #####: 2380:                settings.hot_max_factor = hot_factor;
    #####: 2381:                settings.warm_max_factor = factor;
    #####: 2382:                out_string(c, "OK");
        -: 2383:            }
        -: 2384:        }
    #####: 2385:    } else if (strcmp(tokens[1].value, "mode") == 0 && ntokens >= 4 &&
    #####: 2386:               settings.lru_maintainer_thread) {
    #####: 2387:        if (strcmp(tokens[2].value, "flat") == 0) {
    #####: 2388:            settings.lru_segmented = false;
    #####: 2389:            out_string(c, "OK");
    #####: 2390:        } else if (strcmp(tokens[2].value, "segmented") == 0) {
    #####: 2391:            settings.lru_segmented = true;
    #####: 2392:            out_string(c, "OK");
        -: 2393:        } else {
    #####: 2394:            out_string(c, "ERROR");
        -: 2395:        }
    #####: 2396:    } else if (strcmp(tokens[1].value, "temp_ttl") == 0 && ntokens >= 4 &&
    #####: 2397:               settings.lru_maintainer_thread) {
    #####: 2398:        if (!safe_strtol(tokens[2].value, &ttl)) {
    #####: 2399:            out_string(c, "ERROR");
        -: 2400:        } else {
    #####: 2401:            if (ttl < 0) {
    #####: 2402:                settings.temp_lru = false;
        -: 2403:            } else {
    #####: 2404:                settings.temp_lru = true;
    #####: 2405:                settings.temporary_ttl = ttl;
        -: 2406:            }
    #####: 2407:            out_string(c, "OK");
        -: 2408:        }
        -: 2409:    } else {
    #####: 2410:        out_string(c, "ERROR");
        -: 2411:    }
    #####: 2412:}
        -: 2413:#ifdef EXTSTORE
       11: 2414:static void process_extstore_command(conn *c, token_t *tokens, const size_t ntokens) {
       11: 2415:    set_noreply_maybe(c, tokens, ntokens);
       11: 2416:    bool ok = true;
       11: 2417:    if (ntokens < 4) {
        -: 2418:        ok = false;
      11*: 2419:    } else if (strcmp(tokens[1].value, "free_memchunks") == 0 && ntokens > 4) {
        -: 2420:        // setting is deprecated and ignored, but accepted for backcompat
    #####: 2421:        unsigned int clsid = 0;
    #####: 2422:        unsigned int limit = 0;
    #####: 2423:        if (!safe_strtoul(tokens[2].value, &clsid) ||
    #####: 2424:                !safe_strtoul(tokens[3].value, &limit)) {
    #####: 2425:            ok = false;
        -: 2426:        } else {
    #####: 2427:            if (clsid < MAX_NUMBER_OF_SLAB_CLASSES) {
        -: 2428:                ok = true;
        -: 2429:            } else {
    #####: 2430:                ok = false;
        -: 2431:            }
        -: 2432:        }
       11: 2433:    } else if (strcmp(tokens[1].value, "item_size") == 0) {
    #####: 2434:        if (!safe_strtoul(tokens[2].value, &settings.ext_item_size))
        -: 2435:            ok = false;
       11: 2436:    } else if (strcmp(tokens[1].value, "item_age") == 0) {
    #####: 2437:        if (!safe_strtoul(tokens[2].value, &settings.ext_item_age))
        -: 2438:            ok = false;
       11: 2439:    } else if (strcmp(tokens[1].value, "low_ttl") == 0) {
    #####: 2440:        if (!safe_strtoul(tokens[2].value, &settings.ext_low_ttl))
        -: 2441:            ok = false;
       11: 2442:    } else if (strcmp(tokens[1].value, "recache_rate") == 0) {
        2: 2443:        if (!safe_strtoul(tokens[2].value, &settings.ext_recache_rate))
        -: 2444:            ok = false;
        9: 2445:    } else if (strcmp(tokens[1].value, "compact_under") == 0) {
        3: 2446:        if (!safe_strtoul(tokens[2].value, &settings.ext_compact_under))
        -: 2447:            ok = false;
        6: 2448:    } else if (strcmp(tokens[1].value, "drop_under") == 0) {
        2: 2449:        if (!safe_strtoul(tokens[2].value, &settings.ext_drop_under))
        -: 2450:            ok = false;
        4: 2451:    } else if (strcmp(tokens[1].value, "max_sleep") == 0) {
    #####: 2452:        if (!safe_strtoul(tokens[2].value, &settings.ext_max_sleep))
        -: 2453:            ok = false;
        4: 2454:    } else if (strcmp(tokens[1].value, "max_frag") == 0) {
        2: 2455:        if (!safe_strtod(tokens[2].value, &settings.ext_max_frag))
        -: 2456:            ok = false;
        2: 2457:    } else if (strcmp(tokens[1].value, "drop_unread") == 0) {
        2: 2458:        unsigned int v;
        2: 2459:        if (!safe_strtoul(tokens[2].value, &v)) {
        -: 2460:            ok = false;
        -: 2461:        } else {
        2: 2462:            settings.ext_drop_unread = v == 0 ? false : true;
        -: 2463:        }
        -: 2464:    } else {
        -: 2465:        ok = false;
        -: 2466:    }
       2*: 2467:    if (!ok) {
    #####: 2468:        out_string(c, "ERROR");
        -: 2469:    } else {
       11: 2470:        out_string(c, "OK");
        -: 2471:    }
       11: 2472:}
        -: 2473:#endif
       12: 2474:static void process_flush_all_command(conn *c, token_t *tokens, const size_t ntokens) {
       12: 2475:    int32_t exptime = 0;
       12: 2476:    rel_time_t new_oldest = 0;
        -: 2477:
       12: 2478:    set_noreply_maybe(c, tokens, ntokens);
        -: 2479:
       12: 2480:    pthread_mutex_lock(&c->thread->stats.mutex);
       12: 2481:    c->thread->stats.flush_cmds++;
       12: 2482:    pthread_mutex_unlock(&c->thread->stats.mutex);
        -: 2483:
       12: 2484:    if (!settings.flush_enabled) {
        -: 2485:        // flush_all is not allowed but we log it on stats
        1: 2486:        out_string(c, "CLIENT_ERROR flush_all not allowed");
        3: 2487:        return;
        -: 2488:    }
        -: 2489:
       20: 2490:    if (ntokens != (c->noreply ? 3 : 2)) {
        6: 2491:        if (!safe_strtol(tokens[1].value, &exptime)) {
        1: 2492:            out_string(c, "CLIENT_ERROR invalid exptime argument");
        1: 2493:            return;
        -: 2494:        }
        -: 2495:    }
        -: 2496:
        -: 2497:    /*
        -: 2498:      If exptime is zero realtime() would return zero too, and
        -: 2499:      realtime(exptime) - 1 would overflow to the max unsigned
        -: 2500:      value.  So we process exptime == 0 the same way we do when
        -: 2501:      no delay is given at all.
        -: 2502:    */
       10: 2503:    if (exptime > 0) {
        2: 2504:        new_oldest = realtime(exptime);
        -: 2505:    } else { /* exptime == 0 */
        8: 2506:        new_oldest = current_time;
        -: 2507:    }
        -: 2508:
       10: 2509:    if (settings.use_cas) {
        9: 2510:        settings.oldest_live = new_oldest - 1;
        9: 2511:        if (settings.oldest_live <= current_time)
        7: 2512:            settings.oldest_cas = get_cas_id();
        -: 2513:    } else {
        1: 2514:        settings.oldest_live = new_oldest;
        -: 2515:    }
       10: 2516:    out_string(c, "OK");
        -: 2517:}
        -: 2518:
        6: 2519:static void process_version_command(conn *c) {
        6: 2520:    out_string(c, "VERSION " VERSION);
        6: 2521:}
        -: 2522:
        3: 2523:static void process_quit_command(conn *c) {
        3: 2524:    conn_set_state(c, conn_mwrite);
        3: 2525:    c->close_after_write = true;
        3: 2526:    c->close_reason = NORMAL_CLOSE;
        3: 2527:}
        -: 2528:
        5: 2529:static void process_shutdown_command(conn *c, token_t *tokens, const size_t ntokens) {
        5: 2530:    if (!settings.shutdown_command) {
        1: 2531:        out_string(c, "ERROR: shutdown not enabled");
        1: 2532:        return;
        -: 2533:    }
        -: 2534:
        4: 2535:    if (ntokens == 2) {
        2: 2536:        c->close_reason = SHUTDOWN_CLOSE;
        2: 2537:        conn_set_state(c, conn_closing);
        2: 2538:        raise(SIGINT);
        2: 2539:    } else if (ntokens == 3 && strcmp(tokens[SUBCOMMAND_TOKEN].value, "graceful") == 0) {
        1: 2540:        c->close_reason = SHUTDOWN_CLOSE;
        1: 2541:        conn_set_state(c, conn_closing);
        1: 2542:        raise(SIGUSR1);
        -: 2543:    } else {
        1: 2544:        out_string(c, "CLIENT_ERROR invalid shutdown mode");
        -: 2545:    }
        -: 2546:}
        -: 2547:
       71: 2548:static void process_slabs_command(conn *c, token_t *tokens, const size_t ntokens) {
       71: 2549:    if (ntokens == 5 && strcmp(tokens[COMMAND_TOKEN + 1].value, "reassign") == 0) {
       69: 2550:        int src, dst, rv;
        -: 2551:
       69: 2552:        if (settings.slab_reassign == false) {
    #####: 2553:            out_string(c, "CLIENT_ERROR slab reassignment disabled");
    #####: 2554:            return;
        -: 2555:        }
        -: 2556:
      137: 2557:        if (! (safe_strtol(tokens[2].value, (int32_t*)&src)
       68: 2558:               && safe_strtol(tokens[3].value, (int32_t*)&dst))) {
        1: 2559:            out_string(c, "CLIENT_ERROR bad command line format");
        1: 2560:            return;
        -: 2561:        }
        -: 2562:
       68: 2563:        rv = slabs_reassign(src, dst);
       68: 2564:        switch (rv) {
       66: 2565:        case REASSIGN_OK:
       66: 2566:            out_string(c, "OK");
       66: 2567:            break;
    #####: 2568:        case REASSIGN_RUNNING:
    #####: 2569:            out_string(c, "BUSY currently processing reassign request");
    #####: 2570:            break;
    #####: 2571:        case REASSIGN_BADCLASS:
    #####: 2572:            out_string(c, "BADCLASS invalid src or dst class id");
    #####: 2573:            break;
        2: 2574:        case REASSIGN_NOSPARE:
        2: 2575:            out_string(c, "NOSPARE source class has no spare pages");
        2: 2576:            break;
    #####: 2577:        case REASSIGN_SRC_DST_SAME:
    #####: 2578:            out_string(c, "SAME src and dst class are identical");
    #####: 2579:            break;
        -: 2580:        }
       68: 2581:        return;
        2: 2582:    } else if (ntokens >= 4 &&
        2: 2583:        (strcmp(tokens[COMMAND_TOKEN + 1].value, "automove") == 0)) {
        2: 2584:        process_slabs_automove_command(c, tokens, ntokens);
        -: 2585:    } else {
    #####: 2586:        out_string(c, "ERROR");
        -: 2587:    }
        -: 2588:}
        -: 2589:
        9: 2590:static void process_lru_crawler_command(conn *c, token_t *tokens, const size_t ntokens) {
        9: 2591:    if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, "crawl") == 0) {
        4: 2592:        int rv;
        4: 2593:        if (settings.lru_crawler == false) {
    #####: 2594:            out_string(c, "CLIENT_ERROR lru crawler disabled");
    #####: 2595:            return;
        -: 2596:        }
        -: 2597:
        4: 2598:        rv = lru_crawler_crawl(tokens[2].value, CRAWLER_EXPIRED, NULL, 0,
        -: 2599:                settings.lru_crawler_tocrawl);
        4: 2600:        switch(rv) {
        4: 2601:        case CRAWLER_OK:
        4: 2602:            out_string(c, "OK");
        4: 2603:            break;
    #####: 2604:        case CRAWLER_RUNNING:
    #####: 2605:            out_string(c, "BUSY currently processing crawler request");
    #####: 2606:            break;
    #####: 2607:        case CRAWLER_BADCLASS:
    #####: 2608:            out_string(c, "BADCLASS invalid class id");
    #####: 2609:            break;
    #####: 2610:        case CRAWLER_NOTSTARTED:
    #####: 2611:            out_string(c, "NOTSTARTED no items to crawl");
    #####: 2612:            break;
    #####: 2613:        case CRAWLER_ERROR:
    #####: 2614:            out_string(c, "ERROR an unknown error happened");
    #####: 2615:            break;
        -: 2616:        }
        4: 2617:        return;
        5: 2618:    } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, "metadump") == 0) {
        3: 2619:        if (settings.lru_crawler == false) {
    #####: 2620:            out_string(c, "CLIENT_ERROR lru crawler disabled");
    #####: 2621:            return;
        -: 2622:        }
        3: 2623:        if (!settings.dump_enabled) {
    #####: 2624:            out_string(c, "ERROR metadump not allowed");
    #####: 2625:            return;
        -: 2626:        }
        3: 2627:        if (resp_has_stack(c)) {
        1: 2628:            out_string(c, "ERROR cannot pipeline other commands before metadump");
        1: 2629:            return;
        -: 2630:        }
        -: 2631:
        2: 2632:        int rv = lru_crawler_crawl(tokens[2].value, CRAWLER_METADUMP,
        -: 2633:                c, c->sfd, LRU_CRAWLER_CAP_REMAINING);
        2: 2634:        switch(rv) {
        2: 2635:            case CRAWLER_OK:
        -: 2636:                // TODO: documentation says this string is returned, but
        -: 2637:                // it never was before. We never switch to conn_write so
        -: 2638:                // this o_s call never worked. Need to talk to users and
        -: 2639:                // decide if removing the OK from docs is fine.
        -: 2640:                //out_string(c, "OK");
        -: 2641:                // TODO: Don't reuse conn_watch here.
        2: 2642:                conn_set_state(c, conn_watch);
        2: 2643:                event_del(&c->event);
        2: 2644:                break;
    #####: 2645:            case CRAWLER_RUNNING:
    #####: 2646:                out_string(c, "BUSY currently processing crawler request");
    #####: 2647:                break;
    #####: 2648:            case CRAWLER_BADCLASS:
    #####: 2649:                out_string(c, "BADCLASS invalid class id");
    #####: 2650:                break;
    #####: 2651:            case CRAWLER_NOTSTARTED:
    #####: 2652:                out_string(c, "NOTSTARTED no items to crawl");
    #####: 2653:                break;
    #####: 2654:            case CRAWLER_ERROR:
    #####: 2655:                out_string(c, "ERROR an unknown error happened");
    #####: 2656:                break;
        -: 2657:        }
        2: 2658:        return;
       2*: 2659:    } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, "tocrawl") == 0) {
    #####: 2660:        uint32_t tocrawl;
    #####: 2661:         if (!safe_strtoul(tokens[2].value, &tocrawl)) {
    #####: 2662:            out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2663:            return;
        -: 2664:        }
    #####: 2665:        settings.lru_crawler_tocrawl = tocrawl;
    #####: 2666:        out_string(c, "OK");
    #####: 2667:        return;
       2*: 2668:    } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, "sleep") == 0) {
    #####: 2669:        uint32_t tosleep;
    #####: 2670:        if (!safe_strtoul(tokens[2].value, &tosleep)) {
    #####: 2671:            out_string(c, "CLIENT_ERROR bad command line format");
    #####: 2672:            return;
        -: 2673:        }
    #####: 2674:        if (tosleep > 1000000) {
    #####: 2675:            out_string(c, "CLIENT_ERROR sleep must be one second or less");
    #####: 2676:            return;
        -: 2677:        }
    #####: 2678:        settings.lru_crawler_sleep = tosleep;
    #####: 2679:        out_string(c, "OK");
    #####: 2680:        return;
        2: 2681:    } else if (ntokens == 3) {
        2: 2682:        if ((strcmp(tokens[COMMAND_TOKEN + 1].value, "enable") == 0)) {
        1: 2683:            if (start_item_crawler_thread() == 0) {
        1: 2684:                out_string(c, "OK");
        -: 2685:            } else {
    #####: 2686:                out_string(c, "ERROR failed to start lru crawler thread");
        -: 2687:            }
        1: 2688:        } else if ((strcmp(tokens[COMMAND_TOKEN + 1].value, "disable") == 0)) {
        1: 2689:            if (stop_item_crawler_thread(CRAWLER_NOWAIT) == 0) {
        1: 2690:                out_string(c, "OK");
        -: 2691:            } else {
    #####: 2692:                out_string(c, "ERROR failed to stop lru crawler thread");
        -: 2693:            }
        -: 2694:        } else {
    #####: 2695:            out_string(c, "ERROR");
        -: 2696:        }
        2: 2697:        return;
        -: 2698:    } else {
    #####: 2699:        out_string(c, "ERROR");
        -: 2700:    }
        -: 2701:}
        -: 2702:#ifdef TLS
        -: 2703:static void process_refresh_certs_command(conn *c, token_t *tokens, const size_t ntokens) {
        -: 2704:    set_noreply_maybe(c, tokens, ntokens);
        -: 2705:    char *errmsg = NULL;
        -: 2706:    if (refresh_certs(&errmsg)) {
        -: 2707:        out_string(c, "OK");
        -: 2708:    } else {
        -: 2709:        write_and_free(c, errmsg, strlen(errmsg));
        -: 2710:    }
        -: 2711:    return;
        -: 2712:}
        -: 2713:#endif
        -: 2714:
        -: 2715:// TODO: pipelined commands are incompatible with shifting connections to a
        -: 2716:// side thread. Given this only happens in two instances (watch and
        -: 2717:// lru_crawler metadump) it should be fine for things to bail. It _should_ be
        -: 2718:// unusual for these commands.
        -: 2719:// This is hard to fix since tokenize_command() mutilates the read buffer, so
        -: 2720:// we can't drop out and back in again.
        -: 2721:// Leaving this note here to spend more time on a fix when necessary, or if an
        -: 2722:// opportunity becomes obvious.
   559463: 2723:void process_command_ascii(conn *c, char *command) {
        -: 2724:
   559463: 2725:    token_t tokens[MAX_TOKENS];
   559463: 2726:    size_t ntokens;
   559463: 2727:    int comm;
        -: 2728:
  559463*: 2729:    assert(c != NULL);
        -: 2730:
   559463: 2731:    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);
        -: 2732:
   559463: 2733:    if (settings.verbose > 1)
    #####: 2734:        fprintf(stderr, "<%d %s\n", c->sfd, command);
        -: 2735:
        -: 2736:    /*
        -: 2737:     * for commands set/add/replace, we build an item and read the data
        -: 2738:     * directly into it, then continue in nread_complete().
        -: 2739:     */
        -: 2740:
        -: 2741:    // Prep the response object for this query.
   559463: 2742:    if (!resp_start(c)) {
        1: 2743:        conn_set_state(c, conn_closing);
        1: 2744:        return;
        -: 2745:    }
        -: 2746:
   559462: 2747:    ntokens = tokenize_command(command, tokens, MAX_TOKENS);
        -: 2748:    // All commands need a minimum of two tokens: cmd and NULL finalizer
        -: 2749:    // There are also no valid commands shorter than two bytes.
   559462: 2750:    if (ntokens < 2 || tokens[COMMAND_TOKEN].length < 2) {
        5: 2751:        out_string(c, "ERROR");
        5: 2752:        return;
        -: 2753:    }
        -: 2754:
        -: 2755:    // Meta commands are all 2-char in length.
   559457: 2756:    char first = tokens[COMMAND_TOKEN].value[0];
   559457: 2757:    if (first == 'm' && tokens[COMMAND_TOKEN].length == 2) {
      110: 2758:        switch (tokens[COMMAND_TOKEN].value[1]) {
       56: 2759:            case 'g':
       56: 2760:                process_mget_command(c, tokens, ntokens);
       56: 2761:                break;
       30: 2762:            case 's':
       30: 2763:                process_mset_command(c, tokens, ntokens);
       30: 2764:                break;
        4: 2765:            case 'd':
        4: 2766:                process_mdelete_command(c, tokens, ntokens);
        4: 2767:                break;
        3: 2768:            case 'n':
        3: 2769:                out_string(c, "MN");
        -: 2770:                // mn command forces immediate writeback flush.
        3: 2771:                conn_set_state(c, conn_mwrite);
        3: 2772:                break;
       15: 2773:            case 'a':
       15: 2774:                process_marithmetic_command(c, tokens, ntokens);
       15: 2775:                break;
        2: 2776:            case 'e':
        2: 2777:                process_meta_command(c, tokens, ntokens);
        2: 2778:                break;
    #####: 2779:            default:
    #####: 2780:                out_string(c, "ERROR");
    #####: 2781:                break;
        -: 2782:        }
   559347: 2783:    } else if (first == 'g') {
        -: 2784:        // Various get commands are very common.
  112690*: 2785:        WANT_TOKENS_MIN(ntokens, 3);
   112690: 2786:        if (strcmp(tokens[COMMAND_TOKEN].value, "get") == 0) {
        -: 2787:
   112666: 2788:            process_get_command(c, tokens, ntokens, false, false);
       24: 2789:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "gets") == 0) {
        -: 2790:
       18: 2791:            process_get_command(c, tokens, ntokens, true, false);
        6: 2792:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "gat") == 0) {
        -: 2793:
        5: 2794:            process_get_command(c, tokens, ntokens, false, true);
        1: 2795:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "gats") == 0) {
        -: 2796:
        1: 2797:            process_get_command(c, tokens, ntokens, true, true);
        -: 2798:        } else {
    #####: 2799:            out_string(c, "ERROR");
        -: 2800:        }
        -: 2801:    } else if (first == 's') {
   286558: 2802:        if (strcmp(tokens[COMMAND_TOKEN].value, "set") == 0 && (comm = NREAD_SET)) {
        -: 2803:
  284879*: 2804:            WANT_TOKENS_OR(ntokens, 6, 7);
   284879: 2805:            process_update_command(c, tokens, ntokens, comm, false);
     1679: 2806:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "stats") == 0) {
        -: 2807:
     1603: 2808:            process_stat(c, tokens, ntokens);
       76: 2809:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "shutdown") == 0) {
        -: 2810:
        5: 2811:            process_shutdown_command(c, tokens, ntokens);
       71: 2812:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "slabs") == 0) {
        -: 2813:
       71: 2814:            process_slabs_command(c, tokens, ntokens);
        -: 2815:        } else {
    #####: 2816:            out_string(c, "ERROR");
        -: 2817:        }
        -: 2818:    } else if (first == 'a') {
     8641: 2819:        if ((strcmp(tokens[COMMAND_TOKEN].value, "add") == 0 && (comm = NREAD_ADD)) ||
     8003: 2820:            (strcmp(tokens[COMMAND_TOKEN].value, "append") == 0 && (comm = NREAD_APPEND)) ) {
        -: 2821:
    8641*: 2822:            WANT_TOKENS_OR(ntokens, 6, 7);
     8641: 2823:            process_update_command(c, tokens, ntokens, comm, false);
        -: 2824:        } else {
    #####: 2825:            out_string(c, "ERROR");
        -: 2826:        }
        -: 2827:    } else if (first == 'c') {
       20: 2828:        if (strcmp(tokens[COMMAND_TOKEN].value, "cas") == 0 && (comm = NREAD_CAS)) {
        -: 2829:
       17: 2830:            WANT_TOKENS_OR(ntokens, 7, 8);
       16: 2831:            process_update_command(c, tokens, ntokens, comm, true);
        3: 2832:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "cache_memlimit") == 0) {
        -: 2833:
       3*: 2834:            WANT_TOKENS_OR(ntokens, 3, 4);
        3: 2835:            process_memlimit_command(c, tokens, ntokens);
        -: 2836:        } else {
    #####: 2837:            out_string(c, "ERROR");
        -: 2838:        }
        -: 2839:    } else if (first == 'i') {
      263: 2840:        if (strcmp(tokens[COMMAND_TOKEN].value, "incr") == 0) {
        -: 2841:
     263*: 2842:            WANT_TOKENS_OR(ntokens, 4, 5);
      263: 2843:            process_arithmetic_command(c, tokens, ntokens, 1);
        -: 2844:        } else {
    #####: 2845:            out_string(c, "ERROR");
        -: 2846:        }
        -: 2847:    } else if (first == 'd') {
   141105: 2848:        if (strcmp(tokens[COMMAND_TOKEN].value, "delete") == 0) {
        -: 2849:
  141090*: 2850:            WANT_TOKENS(ntokens, 3, 5);
   141090: 2851:            process_delete_command(c, tokens, ntokens);
       15: 2852:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "decr") == 0) {
        -: 2853:
      10*: 2854:            WANT_TOKENS_OR(ntokens, 4, 5);
       10: 2855:            process_arithmetic_command(c, tokens, ntokens,  0);
        -: 2856:#ifdef MEMCACHED_DEBUG
        5: 2857:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "debugtime") == 0) {
        5: 2858:            WANT_TOKENS_MIN(ntokens, 2);
        5: 2859:            process_debugtime_command(c, tokens, ntokens);
        -: 2860:#endif
    #####: 2861:        } else if (strcmp(tokens[COMMAND_TOKEN].value, "div") == 0) {
        -: 2862:            // add div function
    #####: 2863:            WANT_TOKENS_OR(ntokens, 4, 5);
    #####: 2864:            process_arithmetic_command(c, tokens, ntokens, 3);
        -: 2865:        } else {
    #####: 2866:            out_string(c, "ERROR");
        -: 2867:        }
        -: 2868:    } else if (first == 't') {
     2004: 2869:        if (strcmp(tokens[COMMAND_TOKEN].value, "touch") == 0) {
        -: 2870:
    2004*: 2871:            WANT_TOKENS_OR(ntokens, 4, 5);
     2004: 2872:            process_touch_command(c, tokens, ntokens);
        -: 2873:        } else {
    #####: 2874:            out_string(c, "ERROR");
        -: 2875:        }
        -: 2876:    } else if (first == 'm') {
    #####: 2877:        if (strcmp(tokens[COMMAND_TOKEN].value, "mult") == 0) {
        -: 2878:            // mult function
    #####: 2879:            WANT_TOKENS_OR(ntokens, 4, 5);
    #####: 2880:            process_arithmetic_command(c, tokens, ntokens, 2);
        -: 2881:        } else {
    #####: 2882:            out_string(c, "ERROR");
        -: 2883:        }
     8066: 2884:    } else if (
     8066: 2885:                (strcmp(tokens[COMMAND_TOKEN].value, "replace") == 0 && (comm = NREAD_REPLACE)) ||
     8063: 2886:                (strcmp(tokens[COMMAND_TOKEN].value, "prepend") == 0 && (comm = NREAD_PREPEND)) ) {
        -: 2887:
    8006*: 2888:        WANT_TOKENS_OR(ntokens, 6, 7);
     8006: 2889:        process_update_command(c, tokens, ntokens, comm, false);
        -: 2890:
       60: 2891:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "bget") == 0) {
        -: 2892:        // ancient "binary get" command which isn't in any documentation, was
        -: 2893:        // removed > 10 years ago, etc. Keeping for compatibility reasons but
        -: 2894:        // we should look deeper into client code and remove this.
    #####: 2895:        WANT_TOKENS_MIN(ntokens, 3);
    #####: 2896:        process_get_command(c, tokens, ntokens, false, false);
        -: 2897:
       60: 2898:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "flush_all") == 0) {
        -: 2899:
      12*: 2900:        WANT_TOKENS(ntokens, 2, 4);
       12: 2901:        process_flush_all_command(c, tokens, ntokens);
        -: 2902:
       48: 2903:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "version") == 0) {
        -: 2904:
        6: 2905:        process_version_command(c);
        -: 2906:
       42: 2907:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "quit") == 0) {
        -: 2908:
        3: 2909:        process_quit_command(c);
        -: 2910:
       39: 2911:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "lru_crawler") == 0) {
        -: 2912:
        9: 2913:        process_lru_crawler_command(c, tokens, ntokens);
        -: 2914:
       30: 2915:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "watch") == 0) {
        -: 2916:
       11: 2917:        process_watch_command(c, tokens, ntokens);
        -: 2918:
       19: 2919:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "verbosity") == 0) {
       2*: 2920:        WANT_TOKENS_OR(ntokens, 3, 4);
        2: 2921:        process_verbosity_command(c, tokens, ntokens);
       17: 2922:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "lru") == 0) {
    #####: 2923:        WANT_TOKENS_MIN(ntokens, 3);
    #####: 2924:        process_lru_command(c, tokens, ntokens);
        -: 2925:#ifdef MEMCACHED_DEBUG
        -: 2926:    // commands which exist only for testing the memcached's security protection
       17: 2927:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "misbehave") == 0) {
    #####: 2928:        process_misbehave_command(c);
        -: 2929:#endif
        -: 2930:#ifdef EXTSTORE
       17: 2931:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "extstore") == 0) {
      11*: 2932:        WANT_TOKENS_MIN(ntokens, 3);
       11: 2933:        process_extstore_command(c, tokens, ntokens);
        -: 2934:#endif
        -: 2935:#ifdef TLS
        -: 2936:    } else if (strcmp(tokens[COMMAND_TOKEN].value, "refresh_certs") == 0) {
        -: 2937:        process_refresh_certs_command(c, tokens, ntokens);
        -: 2938:#endif
        -: 2939:    } else {
        6: 2940:        if (strncmp(tokens[ntokens - 2].value, "HTTP/", 5) == 0) {
        4: 2941:            conn_set_state(c, conn_closing);
        -: 2942:        } else {
        2: 2943:            out_string(c, "ERROR");
        -: 2944:        }
        -: 2945:    }
        -: 2946:    return;
        -: 2947:}
        -: 2948:
        -: 2949:
